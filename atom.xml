<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿灿的随想录</title>
  <subtitle>物极必反，否极泰来</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-23T17:21:16.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Rues</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于读书</title>
    <link href="http://yoursite.com/2017/08/24/%E5%85%B3%E4%BA%8E%E8%AF%BB%E4%B9%A6/"/>
    <id>http://yoursite.com/2017/08/24/关于读书/</id>
    <published>2017-08-23T16:39:37.000Z</published>
    <updated>2017-08-23T17:21:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久没看书了，一到放假，看书的效率就从一个月两三本，变成了一个月一本。</p>
<p>作为韩寒的书迷，自从在我看那本从哥哥那儿借来看的新概念作文大赛开始，稚嫩的自己就喜欢上他成熟的笔风，反复读了他的很多短篇小文随笔，却一直没有看过他的第一本书《三重门》</p>
<p>于是乎就特意去书店买来一本，打算暑假慢慢品味。</p>
<p>读完后其实感觉韩寒《三重门》的文笔还是比我想象的生涩，在我看来甚至还不如他当年的《杯中窥人》，虽有对很多事情的批判，但感觉又什么都没有，如今我们看到的韩寒式幽默在当时还是没有完全展现，尤其是那个仓促的结尾和后记的那句<code>我是金子，我要闪光的</code>无不显示出他的年少轻狂。</p>
<p>不过当年的韩寒也不过高三，也只比现在的我小两岁，能有如此想法已属不易。</p>
<p>书中的林雨翔太像年少的我们了，因一点微小的成就自诩神童，身边有一位看似冷漠实则喜欢与你比较的朋友，有终日想尽办法帮助自己学业问题的父母，有一心喜爱却无法修成正果的女孩Susan，还有一个喜欢自己，自己也喜欢的老师。而正是因为太像了，所以我们才能明白这样的我们其实只是一个普通人，普通到需要父母耗尽人脉操尽心帮助自己，普通到无法与喜欢的女孩修成正果，普通到被应试教育打造成“全能人才”。</p>
<p>正巧不巧在前几天读完了钱钟书先生的《围城》，惊觉韩寒的《三重门》正是钱先生《围城》的翻版。钱先生文中的那个“归国留学回来的大学生“方鸿渐不正是韩寒文中的那个林雨翔，那个”空有一身才能的没用的人“吗？</p>
<p>不过钱先生终究是钱先生，《围城》中对于人物的关系的描写，对人物的刻画，都比《三重门》高出许多，书中所批判的社会现状，可以说至今都存留于世。书中方鸿渐对鲍小姐、苏小姐、唐小姐、孙小姐的感情刻画可谓惟妙惟肖，我们的一生又何其相似，从年少荷尔蒙冲动而爱上的鲍小姐，到拒绝已不爱之人苏小姐，再到无法得到的挚爱唐小姐，最后再与看似平凡的孙小姐结婚，起落间不都是我们的一生吗。好比张爱玲的本红玫瑰与白玫瑰里的那白月光和朱砂痣。正因为得不到，唐小姐和Susan才如此完美，正因为日夜相伴，孙小姐才如此引人烦恼。感情这件事，真是一座围城，里面的人想出来，而外面的人却想进去。钱先生真乃大家！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没看书了，一到放假，看书的效率就从一个月两三本，变成了一个月一本。&lt;/p&gt;
&lt;p&gt;作为韩寒的书迷，自从在我看那本从哥哥那儿借来看的新概念作文大赛开始，稚嫩的自己就喜欢上他成熟的笔风，反复读了他的很多短篇小文随笔，却一直没有看过他的第一本书《三重门》&lt;/p&gt;
&lt;p&gt;于是乎
    
    </summary>
    
    
      <category term="随想" scheme="http://yoursite.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>关于Runloop与线程</title>
    <link href="http://yoursite.com/2017/08/23/%E5%85%B3%E4%BA%8ERunloop%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/08/23/关于Runloop与线程/</id>
    <published>2017-08-23T08:24:37.000Z</published>
    <updated>2017-08-23T10:40:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RunLoop"><a href="#RunLoop" class="headerlink" title="RunLoop"></a>RunLoop</h2><p>​    RunLoop是每一个iOS程序员应该都听过的一个名字，翻译过来大概是叫运行循环，在开发的初期几乎见不到RunLoop的身影。但它其实无处不在，最简单的例子就是Objective-C中的main函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int main(int argc, char * argv[]) &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在UIApplicationMain中，就含有一个Runloop，是系统启动时创建的Runloop。</p>
<p>它有这么几个作用：</p>
<ul>
<li>保证App程序不退出</li>
<li>监听用户行为事件</li>
<li>监听时钟事件</li>
<li>监听网络事件</li>
<li>渲染UI</li>
</ul>
<p>如果没有事件发生，Runloop则会进入休眠状态。</p>
<h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h2><p><strong>监听NSTimer</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    NSTimer * timer = [NSTimer timerWithTimeInterval:1.0 target:self selector:@selector(updataTimer) userInfo:nil repeats:YES];</div><div class="line"></div><div class="line">    [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];</div><div class="line"></div><div class="line">//相当于上面两句</div><div class="line">   [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(updataTimer) userInfo:nil repeats:YES];</div></pre></td></tr></table></figure>
<p>上面的代码是创建一个Timer，再通知Runloop每隔1s执行一次updataTimer方法</p>
<p>代码看上去虽然没什么问题，但是我们可以发现一个现象：如果我们在当前的Controller中添加了UI控件，当我们做 UI事件（触摸，拖动）时，我们可以发现每隔一秒执行方法的Timer突然停止了，当我们做完这些操作时，Timer又恢复了。</p>
<p>这一现象的出现，就牵扯到Runloop的模式了，也就是<code>[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];</code>中的Mode。</p>
<p>RunLoop有五种模式，分别是</p>
<ul>
<li>NSDefaultRunLoopMode：默认 Mode，主线程就是在这个 Mode 下运行(默认情况下运行)</li>
<li>UITrackingRunLoopMode：UI Mode，优先级最高，用于监听UI事件，当发生UI事件时，这个Mode的Runloop优先调用</li>
<li>NSRunLoopCommonModes：占位 Mode，其实不是一种真正的 Mode ，但在这一模式下，默认Mode和UI Mode都可以被调用（不会因UI操作卡住Timer操作）</li>
<li>UIInitializationRunLoopMode：在刚启动 App 时进入的第一个 Mode，启动完成后就不再使用。</li>
<li>GSEventReceiveRunLoopMode：接受系统事件的内部 Mode</li>
</ul>
<p>在五种模式中，作为开发者，最常用的其实也就前三种模式。</p>
<p>上面的几个方法中，我们的Runloop为<code>NSDefaultRunLoopMode</code>，在这种情况（默认模式）下，当发生UI事件时，系统会优先调用<code>UITrackingRunLoopMode</code>而不去管默认模式，所以才造成了Timer不执行的情况。</p>
<p>如果我们将<code>NSDefaultRunLoopMode</code>改为<code>NSRunLoopCommonModes</code>就可以解决问题。</p>
<p><strong>那么为什么苹果工程师要分UI模式和Default模式呢？</strong></p>
<p>其实很简单，有耗时操作的存在，当我们在Timer中执行耗时操作时（例如sleep等），如果用占位模式，那么当我们对UI进行操作时，就会回调Timer的方法，因为是耗时操作，就会将界面卡住。</p>
<p><strong>那么怎么既让我们在进行UI操作的时候执行回调，又不卡住界面呢？</strong></p>
<p>其实更简单，因为App中的线程不止主线程一个，在苹果漫长的开发中，苹果工程师将UI界面放在了主线程单线程执行，所以，只要我们把耗时操作放到子线程执行，就不会再出现卡住的情况了</p>
<h2 id="线程与RunLoop"><a href="#线程与RunLoop" class="headerlink" title="线程与RunLoop"></a>线程与RunLoop</h2><p>我们先创建一个自定义线程类，来重写它的-dealloc方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//LYC_Thread.h</div><div class="line">-(void)dealloc&#123;</div><div class="line">    NSLog(@&quot;线程结束&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再进行线程创建</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//ViewController.m</div><div class="line">#import &quot;LYC_Thread.h&quot;</div><div class="line">@interface ViewController ()</div><div class="line">@property (nonatomic,strong) LYC_Thread *thread;        /**&lt; 线程  */</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    _thread = [[LYC_Thread alloc]initWithBlock:^&#123;</div><div class="line">            NSTimer * timer = [NSTimer timerWithTimeInterval:1.0 target:self selector:@selector(updataTimer) userInfo:nil repeats:YES];</div><div class="line">            [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];</div><div class="line">        NSLog(@&quot;线程执行&quot;);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [_thread start];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (void)updataTimer &#123;</div><div class="line">    NSLog(@&quot;耗时操作&quot;);</div><div class="line">    [NSThread sleepForTimeInterval:1.0];</div><div class="line">    NSLog(@&quot;执行完毕&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>乍一看似乎没有问题，然而当我们运行时发现，操作台的打印效果是这样</p>
<p><img src="/img/Thread.png" alt="操作台"></p>
<p>通过几个方法，我们可以看到，<code>NSThread</code>并没有被释放，但是却并没有执行耗时操作，这是为什么呢？</p>
<p>这是因为这个<code>NSThread</code>只是一个对象，而不是线程的本身。</p>
<p>线程是CPU去调用的，CPU负责在线程池里拿出一条线程去执行<code>NSThread</code>的任务，一旦结束，线程便没有了。</p>
<p>所以我们要让线程长期存在，并不是去强引用<code>NSThread</code>，而是让NSThread有执行不完的任务，这样，线程才会一直存在。</p>
<p>于是我们加入一个死循环在thread中并取消对<code>LYC_Thread</code>的强引用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//ViewController.m</div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">        </div><div class="line">    LYC_Thread *thread = [[LYC_Thread alloc]initWithBlock:^&#123;</div><div class="line">            NSTimer * timer = [NSTimer timerWithTimeInterval:1.0 target:self selector:@selector(updataTimer) userInfo:nil repeats:YES];</div><div class="line">        while (true) &#123;</div><div class="line">            </div><div class="line">        &#125;;</div><div class="line">            [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];</div><div class="line">        NSLog(@&quot;线程执行&quot;);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [thread start];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时控制台什么也没有打印，也就是说NSThread并没有被释放，也证明了线程并没有被回收</p>
<p>但是，我们加入死循环时，是没有加入事件的。那如果我们在加入死循环时还想加入事件，怎么办呢？</p>
<p>前面我们说到，<code>RunLoop</code>的作用相当于一个死循环，而且<code>RunLoop</code>还可以监听各种事件。</p>
<p>所以，实现这种需求，<code>RunLoop</code>最为合适。</p>
<p>其实每一条<strong>线程</strong>里都默认有一个<code>RunLoop</code>，只不过默认不开启。我们可以使用<code>[[NSRunLoop currentRunLoop] run];</code>语句对<code>RunLoop</code>进行开启。</p>
<p>开启之后，我们的控制台就会输出这样的信息：</p>
<p><img src="/img/控制台.png" alt="控制台信息"></p>
<p>我们可以发现，”线程执行”语句没有输出，也证明了<code>RunLoop</code>相当于是一个死循环</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>除了开启和运用RunLoop，我们还应该知道如何去关闭RunLoop</p>
<ul>
<li>用<code>[[NSRunLoop currentRunLoop] runUntilDate:]</code>方法，可以设定循环的时间</li>
<li>用<code>[NSThread exit]</code>关闭<code>NSThread</code>线程对象</li>
</ul>
<p>另外，其实主线程和子线程差别也没那么多（本质上应该是相同的）。</p>
<p>我们新建一个子线程后，当我们关闭主线程，子线程仍然能够独立运行，只是主线程的UI不再相应了。</p>
<p>前面提到的<code>在苹果漫长的开发中，苹果工程师将UI界面放在了主线程单线程执行</code>就是主线程与子线程的区别。</p>
<p>如果我们多线程操作UI，那么就会发生<strong>资源抢夺</strong>情况，如果要解决这种情况，就需要进行上锁操作。</p>
<p>苹果工程师们在<code>多线程上锁</code>和<code>主线程单线程执行</code>的选择中，选择了后者。</p>
<p>所以UIKit框架下的控件我们都使用<code>nonatomic</code>非原子属性修饰。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RunLoop&quot;&gt;&lt;a href=&quot;#RunLoop&quot; class=&quot;headerlink&quot; title=&quot;RunLoop&quot;&gt;&lt;/a&gt;RunLoop&lt;/h2&gt;&lt;p&gt;​    RunLoop是每一个iOS程序员应该都听过的一个名字，翻译过来大概是叫运行循环，在开发的
    
    </summary>
    
    
      <category term="RunLoop" scheme="http://yoursite.com/tags/RunLoop/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>春风十里，北京北京？</title>
    <link href="http://yoursite.com/2017/08/20/%E6%98%A5%E9%A3%8E%E5%8D%81%E9%87%8C%EF%BC%8C%E5%8C%97%E4%BA%AC%E5%8C%97%E4%BA%AC%EF%BC%9F/"/>
    <id>http://yoursite.com/2017/08/20/春风十里，北京北京？/</id>
    <published>2017-08-19T16:21:52.000Z</published>
    <updated>2017-08-23T18:12:22.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">我要娶个最心软的姑娘，她奶大腰窄嘴小，她喜欢我拉着她的手，听我胡说八道，无法无天。   	---冯唐</div></pre></td></tr></table></figure>
<p>高中时候，隔壁文科班男生们将冯唐的书奉为经典，四处传阅。</p>
<p>在大学书荒的日子里，猛然想起上面这一幕，遂买了冯唐的北京三部曲，终于明白了那个荷尔蒙迸发年代同学们爱读冯唐的原因。冯唐的书可以说尺度很大，其实说大也不算大，村上春树等一系列外国作家尺度也差不多，只不过很少有国内的作家能写出这样的文章。所以冯唐的文章，还是值得一看的。</p>
<p>私以为，冯唐与王小波是极像的，用华丽的辞藻去构建一个无必现实的社会。</p>
<p>贯穿三部文章的主角秋水，可能是理科生们最想成为的人了吧（hhhhh，有一堆铁哥们，有文学细胞，有强大的女人缘，还有喝不完的小二锅头。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">我在洗车酒吧遇见秋水，第一印象是他的眼睛亮的不同寻常。           --冯唐</div></pre></td></tr></table></figure>
<p>第一本《十八岁给我一个姑娘》写出了青春期男孩在青春期时的内心躁动，情窦初开时对女神朱裳的向往。</p>
<p>第二本《万物生长》则是秋水的大学生活，在这里他遇到了辛夷、杜仲、厚朴等铁哥们，还有柳青，我认为秋水在错过朱裳之后，爱的一直是柳青，从他对于柳青的服服帖帖以及在最后得知被柳青欺骗后的怒火，无不佐证了这个观点。</p>
<p>而第三本《北京，北京》则是讲一群医学青年的大学成长故事。</p>
<p>与最近上的《春风十里，不如你》不同的是，这本所谓原著中讲的事，根本不像剧中所呈现。可以说，这部剧除了名字继承了《北京，北京》，其他的就只剩俗套的青春狗血了。</p>
<p>秋水其实就是一个不折不扣的渣男，在有女友的情况下，还能与小红、柳青纠缠不断。</p>
<p>小红不论是与兽哥哥、小白还是秋水的三日 十四夜，都表现出了对感情的一种特有的洒脱。</p>
<p>整本书中其实我最喜欢的是小黄段子辛夷，虽然出现的篇幅不多，但他可以在宿舍里活跃气氛，在哥们烦心时开几瓶小二锅头，遇事更有几分洒脱，能大胆的追求自己喜欢的女孩。</p>
<p>冯唐的文字真的很有魔力，初读时因为不习惯这样的文字，头大，再加上小说内容也很散，换作其他作品，我可能就弃坑了。</p>
<p>冯唐的笔下的秋水，是我们每一个经历了青春期的人，但哪一个人都不能成为秋水，到最后会发现，我们的周围没有小红烧肉和小白痴，也没有柳青，小二锅头也只能喝半斤，书中所写的生活   永远也不是自己能活出的生活，但其实如果能拥有一点秋水的洒脱，那其实对我来说也足够了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">春水初生，春林初盛，春风十里，不如你。                			---冯唐</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;lin
    
    </summary>
    
    
      <category term="随想" scheme="http://yoursite.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>iOS的本地推送</title>
    <link href="http://yoursite.com/2017/08/11/iOS%E7%9A%84%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/"/>
    <id>http://yoursite.com/2017/08/11/iOS的本地推送/</id>
    <published>2017-08-11T09:27:09.000Z</published>
    <updated>2017-08-13T15:23:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>iOS的推送有本地推送和远程推送两种，由于项目只需要个提示类型的，所以用本地推送就够了，所以在这里，介绍的都是iOS的本地推送。</p>
<h2 id="推送准备"><a href="#推送准备" class="headerlink" title="推送准备"></a>推送准备</h2><p>要进行iOS推送之前，需要几个准备步骤，才能进行推送行为。</p>
<ul>
<li>首先，我们需要打开Push Notification开关</li>
</ul>
<p><img src="/img/Push notification.png" alt="Push Notification"></p>
<p>打开之后，系统会生成一个.entitlements文件</p>
<h3 id="注册通知"><a href="#注册通知" class="headerlink" title="注册通知"></a>注册通知</h3><p>因为没用第三方(穷)，于是选择使用了iOS自带的推送，如果用自带推送就需要以下几个步骤注册通知</p>
<ul>
<li><p>1、导入头文件<code>&lt;UserNotifications/UserNotifications.h&gt;</code>以及遵守<code>&lt;UNUserNotificationCenterDelegate&gt;</code>协议</p>
<p>因为兼容性的考虑，头文件最好写成这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#ifdef NSFoundationVersionNumber_iOS_9_x_Max</div><div class="line">#import &lt;UserNotifications/UserNotifications.h&gt;</div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>2、我们需要注册通知（需在<code>Appdelegate</code>中的<code>-(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code>注册）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"> if ([[UIDevice currentDevice].systemVersion floatValue] &gt;= 10.0) &#123;</div><div class="line">        //iOS10特有</div><div class="line">        UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];</div><div class="line"></div><div class="line">        center.delegate = self;</div><div class="line">        [center requestAuthorizationWithOptions:(UNAuthorizationOptionAlert | UNAuthorizationOptionBadge | UNAuthorizationOptionSound) completionHandler:^(BOOL granted, NSError * _Nullable error) &#123;</div><div class="line">            if (granted) &#123;</div><div class="line">                // 点击允许</div><div class="line">                NSLog(@&quot;注册成功&quot;);</div><div class="line">                [center getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) &#123;</div><div class="line">                    NSLog(@&quot;%@&quot;, settings);</div><div class="line">                &#125;];</div><div class="line">            &#125; else &#123;</div><div class="line">                // 点击不允许</div><div class="line">                NSLog(@&quot;注册失败&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line">    &#125;else if ([[UIDevice currentDevice].systemVersion floatValue] &gt;=8.0)&#123;</div><div class="line">        //iOS8 - iOS10</div><div class="line">        [application registerUserNotificationSettings:[UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert | UIUserNotificationTypeSound | UIUserNotificationTypeBadge categories:nil]];</div><div class="line">        </div><div class="line">    &#125;else if ([[UIDevice currentDevice].systemVersion floatValue] &lt; 8.0) &#123;</div><div class="line">        //iOS8系统以下</div><div class="line">        [application registerForRemoteNotificationTypes:UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeSound];</div><div class="line">    &#125;</div><div class="line">    // 注册获得device Token</div><div class="line">    [[UIApplication sharedApplication] registerForRemoteNotifications];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>获取DeviceToken</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#pragma  mark - 获取device Token</div><div class="line">//获取DeviceToken成功</div><div class="line">- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken&#123;</div><div class="line"></div><div class="line">    //正确写法</div><div class="line">    NSString *deviceString = [[deviceToken description] stringByTrimmingCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@&quot;&lt;&gt;&quot;]];</div><div class="line">    deviceString = [deviceString stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;];</div><div class="line"></div><div class="line">    NSLog(@&quot;deviceToken===========%@&quot;,deviceString);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//获取DeviceToken失败</div><div class="line">- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error&#123;</div><div class="line">    NSLog(@&quot;[DeviceToken Error]:%@\n&quot;,error.description);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>值得一提的是iOS10更新后，在<code>&lt;UNUserNotificationCenterDelegate&gt;</code>中有两个处理通知接受和点击事件的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@protocol UNUserNotificationCenterDelegate &lt;NSObject&gt;</div><div class="line"></div><div class="line">@optional</div><div class="line"></div><div class="line">// The method will be called on the delegate only if the application is in the foreground. If the method is not implemented or the handler is not called in a timely manner then the notification will not be presented. The application can choose to have the notification presented as a sound, badge, alert and/or in the notification list. This decision should be based on whether the information in the notification is otherwise visible to the user.</div><div class="line">- (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler __IOS_AVAILABLE(10.0) __TVOS_AVAILABLE(10.0) __WATCHOS_AVAILABLE(3.0);</div><div class="line"></div><div class="line">// The method will be called on the delegate when the user responded to the notification by opening the application, dismissing the notification or choosing a UNNotificationAction. The delegate must be set before the application returns from applicationDidFinishLaunching:.</div><div class="line">- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)())completionHandler __IOS_AVAILABLE(10.0) __WATCHOS_AVAILABLE(3.0) __TVOS_PROHIBITED;</div><div class="line">@end</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在iOS10里面，本地通知与远程通知合二为一，在新的UNPushNotificationTrigger这个新类中，我们可以得到一些触发条件</p>
<ul>
<li>UNPushNotificationTrigger(远程通知) ：远程推送的通知类型</li>
<li>UNTimeIntervalNotificationTrigger(本地通知)：一定时间后，重复或不重复推送通知</li>
<li>UNCalendarNotificationTrigger(本地通知)：在一固定日期，重复或不重复推送</li>
<li>UNLocationNotificationTrigger(本地通知)：地理位置的一种通知，当用户进入或离开一个地理区域来通知。</li>
</ul>
<p>iOS10中接受通知回调是这样用的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// iOS 10收到通知</div><div class="line">- (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler&#123;</div><div class="line">    NSDictionary * userInfo = notification.request.content.userInfo;</div><div class="line">    UNNotificationRequest *request = notification.request; // 收到推送的请求</div><div class="line">    UNNotificationContent *content = request.content; // 收到推送的消息内容</div><div class="line">    NSNumber *badge = content.badge;  // 推送消息的角标</div><div class="line">    NSString *body = content.body;    // 推送消息体</div><div class="line">    UNNotificationSound *sound = content.sound;  // 推送消息的声音</div><div class="line">    NSString *subtitle = content.subtitle;  // 推送消息的副标题</div><div class="line">    NSString *title = content.title;  // 推送消息的标题</div><div class="line"></div><div class="line">    if([notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) &#123;</div><div class="line">        NSLog(@&quot;iOS10 前台收到远程通知:%@&quot;, [self logDic:userInfo]);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        // 判断为本地通知</div><div class="line">        NSLog(@&quot;iOS10 前台收到本地通知:&#123;\\\\nbody:%@，\\\\ntitle:%@,\\\\nsubtitle:%@,\\\\nbadge：%@，\\\\nsound：%@，\\\\nuserInfo：%@\\\\n&#125;&quot;,body,title,subtitle,badge,sound,userInfo);</div><div class="line">    &#125;</div><div class="line">    completionHandler(UNNotificationPresentationOptionBadge|UNNotificationPresentationOptionSound|UNNotificationPresentationOptionAlert); // 需要执行这个方法，选择是否提醒用户，有Badge、Sound、Alert三种类型可以设置</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>// 通知的点击事件</p>
<ul>
<li><p>(void)userNotificationCenter:(UNUserNotificationCenter <em>)center didReceiveNotificationResponse:(UNNotificationResponse </em>)response withCompletionHandler:(void(^)())completionHandler{</p>
<p>  NSDictionary <em> userInfo = response.notification.request.content.userInfo;<br>  UNNotificationRequest </em>request = response.notification.request; // 收到推送的请求<br>  UNNotificationContent <em>content = request.content; // 收到推送的消息内容<br>  NSNumber </em>badge = content.badge;  // 推送消息的角标<br>  NSString <em>body = content.body;    // 推送消息体<br>  UNNotificationSound </em>sound = content.sound;  // 推送消息的声音<br>  NSString <em>subtitle = content.subtitle;  // 推送消息的副标题<br>  NSString </em>title = content.title;  // 推送消息的标题<br>  if([response.notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {</p>
<pre><code>NSLog(@&quot;iOS10 收到远程通知:%@&quot;, [self logDic:userInfo]);
</code></pre><p>  }<br>  else {</p>
<pre><code>// 判断为本地通知
NSLog(@&quot;iOS10 收到本地通知:{\\\\nbody:%@，\\\\ntitle:%@,\\\\nsubtitle:%@,\\\\nbadge：%@，\\\\nsound：%@，\\\\nuserInfo：%@\\\\n}&quot;,body,title,subtitle,badge,sound,userInfo);
</code></pre><p>  }</p>
<p>  // Warning: UNUserNotificationCenter delegate received call to -userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler: but the completion handler was never called.<br>  completionHandler();  // 系统要求执行这个方法</p>
</li>
</ul>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">**这里需要提到的是，如果我们不写completionHandler（）这个方法，可能会报错误**</div><div class="line"></div><div class="line">* 在iOS10之前，本地通知创建是这样的：</div><div class="line"></div><div class="line">```objective-c</div><div class="line">- (void)sendLocalNotifi &#123; </div><div class="line">// 添加本地通知</div><div class="line">     UILocalNotification *localNoti = [[UILocalNotification alloc] init];</div><div class="line">     NSDate *Date = [NSDate date];</div><div class="line">     localNoti.fireDate = Date; // 发送通知时间 这里没做具体处理，若是要推送时间无误差，时间要精确到秒。</div><div class="line">     localNoti.timeZone = [NSTimeZone localTimeZone];     // 设置时区 默认时区</div><div class="line">     localNoti.repeatInterval = NSCalendarUnitSecond;     // 发送通知的间隔</div><div class="line">     localNoti.alertTitle = @&quot;iOS10之前的本地通知&quot;;                      // 弹窗title</div><div class="line">     localNoti.alertBody = @&quot;搞事了搞事了&quot;;               // 弹窗body显示内容</div><div class="line"></div><div class="line">     localNoti.soundName = UILocalNotificationDefaultSoundName;</div><div class="line">     localNoti.alertLaunchImage = @&quot;1.jpg&quot;; // 用于点击启动显示启动页，必须是 UILaunchImageFile</div><div class="line">     localNoti.userInfo = [NSDictionary dictionaryWithObjectsAndKeys:@&quot;value&quot;, @&quot;key&quot;, nil];</div><div class="line">     //    localNoti.soundName = @&quot;1&quot;;                       // 响铃音乐文件名称， 放在main bundle 里边</div><div class="line">      localNoti.applicationIconBadgeNumber = 2;         // app 的未读消息个数</div><div class="line"></div><div class="line"></div><div class="line">     [[UIApplication sharedApplication] cancelAllLocalNotifications];</div><div class="line">     [[UIApplication sharedApplication] scheduleLocalNotification:localNoti];    // 按照指定时间发送通知</div><div class="line">     // [[UIApplication sharedApplication] presentLocalNotificationNow:localNoti];  // 立即发送通知</div><div class="line"></div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>而在iOS10之后，通知创建变成了这样：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">UNMutableNotificationContent *content = [[UNMutableNotificationContent alloc] init];</div><div class="line">    content.title = @&quot;iOS10之后啦&quot;;</div><div class="line">    content.subtitle = @&quot;搞事了&quot;;</div><div class="line">    content.body = @&quot;123~&quot;;</div><div class="line">    content.badge = @0;</div><div class="line">    NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;image1&quot; ofType:@&quot;png&quot;];</div><div class="line">    NSError *error = nil;</div><div class="line">//将本地图片的路径形成一个图片附件，加入到content中</div><div class="line">    UNNotificationAttachment *img_attachment = [UNNotificationAttachment attachmentWithIdentifier:@&quot;att1&quot; URL:[NSURL fileURLWithPath:path] options:nil error:&amp;error];</div><div class="line">    if (error) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;, error);</div><div class="line">    &#125;</div><div class="line">    content.attachments = @[img_attachment];</div><div class="line">    //设置为@&quot;&quot;以后，进入app将没有启动页</div><div class="line">    content.launchImageName = @&quot;&quot;;</div><div class="line">    UNNotificationSound *sound = [UNNotificationSound defaultSound];</div><div class="line">    content.sound = sound;</div><div class="line">    //设置时间间隔的触发器</div><div class="line">    UNTimeIntervalNotificationTrigger *time_trigger = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:10 repeats:NO];</div><div class="line">    NSString *requestIdentifer = @&quot;time interval request&quot;;</div><div class="line">    content.categoryIdentifier = @&quot;&quot;;</div><div class="line">    UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:requestIdentifer content:content trigger:time_trigger];</div><div class="line">    [[UNUserNotificationCenter currentNotificationCenter] addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;,error);</div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此，本地通知创建就结束了，经过测试发现</p>
<ul>
<li>iOS10之前的推送，app在前台的时候，通知虽然会执行回调，但是并不会在主界面显示推送按钮</li>
<li>iOS10之前的推送，现在仍可以使用，感觉还挺方便的。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Neo_joke的<a href="http://www.jianshu.com/p/9c9035212af0" target="_blank" rel="external">简书文章</a></p>
<p>徐不同的<a href="http://www.jianshu.com/p/f5337e8f336d" target="_blank" rel="external">简书文章</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;iOS的推送有本地推送和远程推送两种，由于项目只需要个提示类型的，所以用本地推送就够了，所以在这里，介绍的都是iOS的本地推送。&lt;/p&gt;
&lt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="推送" scheme="http://yoursite.com/tags/%E6%8E%A8%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>关于iBeacon</title>
    <link href="http://yoursite.com/2017/08/06/%E5%85%B3%E4%BA%8EiBeacon/"/>
    <id>http://yoursite.com/2017/08/06/关于iBeacon/</id>
    <published>2017-08-06T10:54:02.000Z</published>
    <updated>2017-08-11T06:35:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为最近在做的项目是关于蓝牙连接的项目，前辈在做这个项目的时候，除了用ReactiveCocoa以外，还使用了iBeacon技术。</p>
<p>对于从未接触蓝牙这块的我，感觉打开了新世界大门。</p>
<h2 id="iBeacon"><a href="#iBeacon" class="headerlink" title="iBeacon"></a>iBeacon</h2><p>iBeacon是基于地理位置的微定位技术，使用的是Apple提供的CoreLocation（BLE使用的是CoreBluetooth）。根据名字，应该很清楚，使用iBeacon是需要开启定位的，而使用BLE只需要开启蓝牙。  </p>
<h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><ul>
<li>UUID：UUID是Universally UniqueIdentifier（通用唯一标识符）的缩写，实际上是一个随机字符串。在iBeacon中，UUID通常用于表示顶层标识，如果生成一个UUID给iBeacon设备，那么一个设备检测到你的iBeacon时，它就知道它是在和哪个iBeacon通信了。</li>
<li>major：用于将相关的beacon标识为一组。</li>
<li>minor：用于标识特定的beacon设备，每个设备都有唯一的minor编号。</li>
</ul>
<p>下面用一个商场的例子来解释这三个术语</p>
<p>你用有特定UUID的设备与商场里的UUID设备进行通信，一个商店中的所有设备都会被分配到相同的major编号，应用程序根据major编号，就可以知道你大概在哪个商店。而每个商店的每个beacon设备都有唯一的minor编号，那程序通过这个minor编号，就知道你位于商店的某一个位置</p>
<h2 id="iBeacon属性"><a href="#iBeacon属性" class="headerlink" title="iBeacon属性"></a>iBeacon属性</h2><p>iOS中的ibeacon通信数据有</p>
<ul>
<li>（NSUUID）ProximityUUID</li>
<li>（NSNumber）major</li>
<li>（NSNumber）minor</li>
<li>（CLProximity）proximity</li>
<li>（CLLocationAccuracy）accuracy</li>
<li>(NSInteger) rssi</li>
</ul>
<p>分别含义是：</p>
<ul>
<li>proximityUUID、major、minor表示ibeacon的uuid、major、minor</li>
<li>proximity是Apple提供的几个表示距离的属性<ul>
<li>CLProximityUnknown-没有数据</li>
<li>CLProximityImmediate-十厘米以内</li>
<li>CLProximityNear-一米以内</li>
<li>CLProximityFar-一米以外</li>
</ul>
</li>
<li>accuracy表示大约距离</li>
<li>RSSI表示信号强度</li>
</ul>
<p>根据属性我们可以看到，Apple的判断方式很有趣，它并不去仔细推断距离，而是使用贴近（Immediate）、一米以内（Near）、一米以外（Far）三种状态。距离在1m以内时，RSSI值基本上成比例减少，而在1米以上时，由于各种因素，RSSI是上下波动状态，所以无法推断距离，判定为Far</p>
<h2 id="iBeacon方法"><a href="#iBeacon方法" class="headerlink" title="iBeacon方法"></a>iBeacon方法</h2><p>Apple在iOS4中增加了地理围栏API，可以用来在设备进出某个区域时获得通知，包括了：</p>
<ul>
<li>-startMonitoringForRegion:</li>
<li>-locationManager:didEnterRegion:</li>
<li>-locationManager:didExitRegion:</li>
</ul>
<p>这种检测iBeacon的方式叫做<strong>monitoring</strong>。</p>
<p>用这几种方法可以使程序在后台运行时检测iBeacon，但是只能同时检测20个Region，且不能推测设备与Beacon的距离。</p>
<p>除了使用地理围栏API，Apple还在iOS7中新增加了iBeacon的专用检测方式，也就是<strong>ranging</strong></p>
<p>通过<strong>CLLocationManager</strong>的方法</p>
<ul>
<li><code>-startRangingBeaconsInRegion:</code> 检测特定iBeacon。</li>
</ul>
<p>当检测到beacon的时候，<strong>CLLocationManager</strong>的delegate </p>
<ul>
<li><code>-locationManager：didRangeBeacons:inRegion:</code>会被调用，通知调用者被检测到的beacons。这个方法会返回一个<strong>CLbeacon</strong>数组，根据里面的<strong>proximity</strong>(上文所提到的属性)就可以判断设备与beacon之间的距离。</li>
</ul>
<h2 id="iBeacon行为"><a href="#iBeacon行为" class="headerlink" title="iBeacon行为"></a>iBeacon行为</h2><p>根据<a href="https://tech.meituan.com/" target="_blank" rel="external">美团点评技术团队</a>的文章，暂时有以下结论</p>
<ul>
<li>检测到beacon的时间跟设备进行蓝牙扫描的时间间隔有关，每当设备扫描时，就能发现iBeacon region的变化。</li>
<li>在rangging打开的情况下，设备会每秒钟做一次扫描，也就是说状态更新最多延迟一秒。</li>
<li>程序在后台运行，并且monitoring打开的时候，设备可能每隔数分钟做一次扫描。iOS7响应较慢，iOS7.1后有较大改善。</li>
<li>如果存在设置<code>notifyEnterStateOnDisplay=yes</code>的beacon，iOS会在屏幕从黑屏点亮的时候进行一次扫描。</li>
<li>设备重启并不影响iBeacon后台检测的执行</li>
<li>iOS7中，在多任务界面中杀掉程序会终止iBeacon检测的执行，iOS7.1改变了这一行为，被杀掉的app还可以继续进行iBeacon的检测。</li>
</ul>
<p>在才接触这个项目的初期，好奇于项目与我事先准备的BLE协议实现有些区别，后来了解到用到了iBeacon技术，起初好奇为什么锁屏点亮和锁屏黑屏有什么区别，以为只是因为亮屏可能会激活后台。后来在了解了iBeacon之后，才知道，还有这种操作。所以啊，我们永远都不能放弃学习~。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>美团点评技术团队：<a href="https://tech.meituan.com/iBeacaon-first-glance.html" target="_blank" rel="external">iBeacon初探</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为最近在做的项目是关于蓝牙连接的项目，前辈在做这个项目的时候，除了用ReactiveCocoa以外，还使用了iBeacon技术。&lt;/p&gt;
&lt;p&gt;对于从未接触蓝牙这块的我，感觉打开了新世界大门。&lt;/p&gt;
&lt;h2 id=&quot;iBeacon&quot;&gt;&lt;a href=&quot;#iBeacon&quot;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="iBeacon" scheme="http://yoursite.com/tags/iBeacon/"/>
    
  </entry>
  
  <entry>
    <title>项目里的ReactiveCocoa</title>
    <link href="http://yoursite.com/2017/07/28/%E9%A1%B9%E7%9B%AE%E9%87%8C%E7%9A%84ReactiveCocoa/"/>
    <id>http://yoursite.com/2017/07/28/项目里的ReactiveCocoa/</id>
    <published>2017-07-28T10:59:44.000Z</published>
    <updated>2017-08-11T10:02:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>​    最近做了一个蓝牙相关的项目，项目的前辈当时是用的ReactiveCocoa（RAC）做的，才开始接手的时候，看的一头雾水。经过一段时间自学，现在对RAC略知一二。</p>
<h2 id="FunctionalReactiveProgramming"><a href="#FunctionalReactiveProgramming" class="headerlink" title="FunctionalReactiveProgramming"></a>FunctionalReactiveProgramming</h2><p>FRP是一种响应变化的编程范式。<img src="/img/FRP.png" alt="FRP"></p>
<p>就像上面的登录界面，在用户输入用户名和密码之前，登陆按钮是处于无法点击状态的，只有当用户名和密码都被填入一定值的时候，才可以点击登陆按钮。这种一个按钮会由于另外几个控件的改变而改变的联动就是FRP。</p>
<h2 id="ReactiveCocoa"><a href="#ReactiveCocoa" class="headerlink" title="ReactiveCocoa"></a>ReactiveCocoa</h2><p>RAC是github上的一个开源项目，可以说是将响应式编程做到了极致。RAC中，通过<strong>RACsignal</strong>来发送信号以执行各种操作</p>
<p>在这里，<a href="limboy.me">limboy(李忠)</a> 的文章里写的很好</p>
<p>他把信号比作水龙头，但是水龙头里装的是直径与水龙头内径一样的玻璃球(Value)，这样，玻璃球就是依次出来的（没有并发）。水龙头是关着的，需要有接收方（Subscriber）打开，这样只要有玻璃球(Value)出现，就会自动给接收方(subscriber)。还可以在水龙头上加一个滤嘴(Filter)，不符合的东西也不让过。还可以加一个改动装置，把球改成符合自己的需求（map）。也可以合并多个水龙头(combineLastest:reduce:)，这样只有有一个水龙头出玻璃球，这个新水龙头的接收方就会得到这个球。</p>
<p>比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//filter某个属性满足一定条件才执行。  </div><div class="line"></div><div class="line">  [[RACObserve(self, count) filter:^BOOL(id count) &#123;</div><div class="line">  if ([count integerValue] == 5) &#123;            </div><div class="line">		return YES;        &#125;</div><div class="line">	else&#123;           </div><div class="line">	 	return NO;        </div><div class="line">	&#125;   </div><div class="line"> &#125;]subscribeNext:^(id count) &#123;//上面return YES 才执行   </div><div class="line"></div><div class="line"> NSLog(@&quot;数量为===%@&quot;,count);    &#125;];</div></pre></td></tr></table></figure>
<p>RAC还在<strong>UIButton、UITextFiled</strong>等的Category中添加了很多方法，可以直接设置事件。</p>
<h2 id="统一了KVO-Event-Notification等的处理"><a href="#统一了KVO-Event-Notification等的处理" class="headerlink" title="统一了KVO Event Notification等的处理"></a>统一了KVO Event Notification等的处理</h2><blockquote>
<p>KVO</p>
</blockquote>
<p>RAC中监听属性改变不再像KVO中用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">而是使用block</div><div class="line"></div><div class="line">```iOS</div><div class="line">// 只有当名字以&apos;j&apos;开头，才会被记录</div><div class="line">[[RACAble(self.username) filter:^(NSString *newName) &#123;</div><div class="line">       return [newName hasPrefix:@&quot;j&quot;];</div><div class="line">   &#125;]</div><div class="line">   subscribeNext:^(NSString *newName) &#123;</div><div class="line">       NSLog(@&quot;%@&quot;, newName);</div><div class="line">   &#125;];</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Notification</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[NSNotificationCenter defaultCenter]rac_addObserverForName:@&quot;ReceiveData&quot; object:nil] subscribeNext:^(NSNotification * _Nullable x) &#123;</div><div class="line">                NSlog(@&quot;%@&quot;,x);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="冷热信号"><a href="#冷热信号" class="headerlink" title="冷热信号"></a>冷热信号</h2><p>上面提到的只有subscriber订阅时才生效的信号叫做<strong>冷信号</strong></p>
<p>有冷信号，自然就有<strong>热信号</strong></p>
<ul>
<li>热信号是主动的，不管你有没有订阅事件，它会时刻推送。</li>
<li>热信号可以有多个订阅者，信号和订阅者可以共享信息，多个订阅者可以在订阅开始时同时接收到这个时间及以后的信号（热信号创建时若没有订阅者，它仍然会进行信号发送），而冷信号多个订阅者订阅时，是将信号完整的分别发送给订阅者。</li>
</ul>
<p>冷热信号的区分，美团点评技术团队的<a href="https://tech.meituan.com/talk-about-reactivecocoas-cold-signal-and-hot-signal-part-1.html" target="_blank" rel="external">细说ReactiveCocoa的冷热信号</a>文章写的非常的好。</p>
<p>因为项目的需要，本人还在不断学习，归纳的东西还不够成熟，希望自己能加油吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    最近做了一个蓝牙相关的项目，项目的前辈当时是用的ReactiveCocoa（RAC）做的，才开始接手的时候，看的一头雾水。经过一段时间自学，现在对RAC略知一二。&lt;/p&gt;
&lt;h2 id=&quot;FunctionalReactiveProgramming&quot;&gt;&lt;a href
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="RAC" scheme="http://yoursite.com/tags/RAC/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/07/24/%E9%9A%8F%E6%83%B3/"/>
    <id>http://yoursite.com/2017/07/24/随想/</id>
    <published>2017-07-24T08:55:34.000Z</published>
    <updated>2017-08-23T16:40:05.000Z</updated>
    
    <content type="html"><![CDATA[<p> title: 随想</p>
<p> date: 2017-07-24 13:54:47</p>
<p> tags: 随想</p>
<pre><code>本来按理说像我这样的肚子里没有诗歌文学，脑子里没有代码技术的人，是不需要开博客的。
</code></pre><p>​<br>​<br>​    </p>
<pre><code>后来想了一想，有些东西还是写出来好一点，索性就花了点时间创建了这个博客来监督自己。
</code></pre><p>​<br>​    </p>
<pre><code>如果能帮到你，乃是我的荣幸。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; title: 随想&lt;/p&gt;
&lt;p&gt; date: 2017-07-24 13:54:47&lt;/p&gt;
&lt;p&gt; tags: 随想&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;本来按理说像我这样的肚子里没有诗歌文学，脑子里没有代码技术的人，是不需要开博客的。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​&lt;
    
    </summary>
    
    
  </entry>
  
</feed>

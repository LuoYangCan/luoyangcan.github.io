<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿灿的随想录</title>
  <subtitle>物极必反，否极泰来</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-13T08:36:07.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Rues</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS内存管理 - ARC</title>
    <link href="http://yoursite.com/2017/09/13/iOS%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-ARC/"/>
    <id>http://yoursite.com/2017/09/13/iOS内存管理-ARC/</id>
    <published>2017-09-13T08:31:46.000Z</published>
    <updated>2017-09-13T08:36:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，Apple从OS X Lion和iOS 5引入了新的内存管理功能——自动引用计数(ARC)功能。这些功能对于我们开发者说也是需要去了解的一个重要知识点。</p>
<h1 id="自动引用计数"><a href="#自动引用计数" class="headerlink" title="自动引用计数"></a>自动引用计数</h1><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">在Objective-C中采用Automatic Reference Counting机制，让编译器来进行内存管理。</div><div class="line">在新一代Apple LLVM编译器中设置ARC为有效状态，就无需在此键入retain和release代码，</div><div class="line">这在降低程序崩溃、内存泄漏等风险的同时，很大程度上减少了开发程序的工作量。</div><div class="line">编译器完全清楚目标对象，并能立刻释放那些不再被使用的对象。</div><div class="line">如此一来，应用程序将具有可预测性，且能流畅运行，速度也将大幅提升。</div><div class="line">								--------- Apple</div></pre></td></tr></table></figure>
<p>ARC的机制可以用开关房间里的灯的事例来说明：</p>
<ul>
<li>进入房间的人需要灯光照明。</li>
<li>离开房间的人不需要灯光照明。</li>
<li>如果离开房间的人因不需要照明而把灯关掉，那房间里剩下的人则不能得到照明。</li>
</ul>
<p>解决办法就是使房间还有至少1人的情况下保持开灯，无人时关灯。</p>
<p>为了判断是否还有人在房间里，我们导入计数功能来计算“需要照明的人数”：</p>
<ul>
<li>第一个人进入房间，“需要照明人数”+1，计数值由0变为1</li>
<li>之后每有一个人进入房间，“需要照明人数”就+1。</li>
<li>每当有人离开房间，“需要照明人数”就-1 。</li>
<li>最后一个人下班离开房间时，“需要照明人数”就从1减到了0，所以要关灯。</li>
</ul>
<p>我们将这个事例套入到objc的中，对应的关系如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">对照明设备所做操作</th>
<th style="text-align:left">对objc对象所做动作</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">开灯</td>
<td style="text-align:left">生成对象</td>
</tr>
<tr>
<td style="text-align:left">需要照明</td>
<td style="text-align:left">持有对象</td>
</tr>
<tr>
<td style="text-align:left">不需要照明</td>
<td style="text-align:left">释放对象</td>
</tr>
<tr>
<td style="text-align:left">关灯</td>
<td style="text-align:left">废弃对象</td>
</tr>
</tbody>
</table>
<p>上述中的<code>生成</code>、<code>持有</code>、<code>释放</code>、<code>废弃</code>概念可以对应objc的这些方法：</p>
<table>
<thead>
<tr>
<th>对象操作</th>
<th>Objective-C方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>生成并持有对象</td>
<td>alloc/new/copy/mutableCopy等方法</td>
</tr>
<tr>
<td>持有对象</td>
<td>retain方法</td>
</tr>
<tr>
<td>释放对象</td>
<td>release方法</td>
</tr>
<tr>
<td>废弃对象</td>
<td>dealloc方法</td>
</tr>
</tbody>
</table>
<hr>
<p>我们可以用一下思路来看内存管理，不必去纠结引用计数</p>
<ul>
<li>自己生成的对象，自己持有。</li>
<li>非自己生成的对象，自己也可以持有。</li>
<li>不再需要自己持有的对象时释放。</li>
<li>非自己持有的对象无法释放。</li>
</ul>
<h2 id="自己生成的对象，自己持有"><a href="#自己生成的对象，自己持有" class="headerlink" title="自己生成的对象，自己持有"></a>自己生成的对象，自己持有</h2><p>使用以下名称开头的方法名意味着自己生成的对象只有自己持有：</p>
<ul>
<li>alloc</li>
<li>new</li>
<li>copy</li>
<li>mutableCopy</li>
</ul>
<h3 id="alloc-new"><a href="#alloc-new" class="headerlink" title="alloc/new"></a>alloc/new</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//自己生成并持有对象</div><div class="line">id obj1 = [[NSObject alloc] init];</div><div class="line">//自己持有对象</div><div class="line"></div><div class="line"></div><div class="line">//自己生成并持有对象</div><div class="line">id obj2 = [NSObject new];</div><div class="line">//自己持有对象</div></pre></td></tr></table></figure>
<p>一般来说，<code>[NSObject new]</code>与<code>[[NSObject alloc] init]</code>是完全一样的。</p>
<p>区别在于<code>alloc</code>因将关联对象内存分配到相邻区域从而更加省时省力。</p>
<p><code>alloc</code>也可以用自定义的<code>init</code>方法(例如<code>initWithFrame</code>)而new只能用默认的init。</p>
<h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p><code>copy</code>用基于NSCopying方法约定，由各类实现的<code>copyWithZone：</code>方法生成并持有对象的副本。与<code>copy</code>方法类似。</p>
<p><code>mutableCopy</code>利用基于<code>NSMutableCopying</code>方法约定，由各类实现的<code>mutableCopyWithZone：</code>方法生成并持有对象的副本。</p>
<p>区别在于，<code>copy</code>方法生成不可变更的对象，而<code>mutableCopy</code>生成可变更的对象。类似<code>NSArray</code>与<code>NSMutableArray</code>类对象的差异。这里还涉及到一个深浅拷贝的知识点。</p>
<p>两个方法虽然生成的是对象的副本，但是同<code>alloc</code>、<code>new</code>一样在<strong>自己生成并持有对象</strong>这点上没有改变。</p>
<h2 id="非自己生成的对象，自己也能持有"><a href="#非自己生成的对象，自己也能持有" class="headerlink" title="非自己生成的对象，自己也能持有"></a>非自己生成的对象，自己也能持有</h2><p>用上述方法以外的方法（即用<code>alloc</code>、<code>new</code>、<code>copy</code>和<code>mutableCopy</code>以外的方法）取得的对象，因为非自己生成持有，所以自己不是该对象的持有者。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//取得非自己生成并持有的对象</div><div class="line">id obj = [NSMutableArray array];</div><div class="line">//取得的对象存在，但自己不持有对象</div><div class="line">[obj retain];</div><div class="line">//自己持有该对象</div></pre></td></tr></table></figure>
<p>通过<code>retain</code>方法，非自己生成的对象跟用<code>alloc/new/copy/mutableCopy</code>生成并持有的对象一样名称为了自己所持有的。</p>
<h2 id="不再需要自己持有的对象时释放"><a href="#不再需要自己持有的对象时释放" class="headerlink" title="不再需要自己持有的对象时释放"></a>不再需要自己持有的对象时释放</h2><p>自己持有的对象，一旦不需要，持有者有义务释放该对象。释放使用<code>release</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">//自己生成并持有对象</div><div class="line">id obj = [[NSObject alloc] init];</div><div class="line">//自己持有对象</div><div class="line">[obj release];</div><div class="line">/* </div><div class="line">	释放对象</div><div class="line">	</div><div class="line">	指向对象的指针仍然被保留在变量obj中</div><div class="line">	</div><div class="line">	对象一经释放就不可被访问</div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line">//取得非自己生成并持有的对象</div><div class="line">id obj = [NSMutableArray array];</div><div class="line"></div><div class="line">//取得的对象存在 但自己不持有</div><div class="line"></div><div class="line">[obj retain];</div><div class="line"></div><div class="line">//持有对象</div><div class="line"></div><div class="line">[obj release];</div><div class="line"></div><div class="line">/*</div><div class="line">	释放对象</div><div class="line">	对象不可再被访问</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>如果要用某个方法生成对象，并将其返还给该方法的调用方，则需要以下方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (id) allocObject &#123;</div><div class="line">    //自己生成并持有</div><div class="line">  id obj = [[NSOBject alloc] init];</div><div class="line">  //自己持有对象</div><div class="line">  return obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line">	原封不动的返回alloc方法生成并持有的对象，就能让调用方也持有该对象。</div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line">//取得非自己生成并持有的对象</div><div class="line"></div><div class="line">id obj1 =[obj0 allocObject];</div><div class="line"></div><div class="line">//自己持有对象</div></pre></td></tr></table></figure>
<p>注意，<code>allocObject</code>方法符合<code>以alloc/new/copy/mutableCopy方法开头</code>并用驼峰拼写法命名的命名规则。因此它与<code>alloc</code>方法生成并持有对象的情况完全相同。</p>
<p>若使取得的对象存在，但自己不持有对象，就需要这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-(id)Object&#123;</div><div class="line">    id obj = [[NSObject alloc] init];</div><div class="line">  //自己持有对象</div><div class="line">  [obj autorelease];</div><div class="line">  //取得对象存在，但不持有</div><div class="line">  return obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上例中，我们使用了<code>autorelease</code>方法。用该方法，可以使取得的对象存在，但自己不持有对象。</p>
<p><code>autorelease</code>提供这样的功能，使对象在超出指定的生存范围时能够自动并正确地释放(调用<code>release</code>)。</p>
<p>使用<code>[NSmutableArray array]</code>方法取得谁都不持有的对象，就是通过<code>autorelease</code>实现的。</p>
<h2 id="无法释放非自己持有的对象"><a href="#无法释放非自己持有的对象" class="headerlink" title="无法释放非自己持有的对象"></a>无法释放非自己持有的对象</h2><p>对于用<code>alloc/new/copy/mutableCopy</code>方法生成并持有的对象，或是用<code>retain</code>方法持有的对象，由于持有者是自己，所以在不需要该对象时需要将其释放。</p>
<p>而由此以外所得到的对象绝对不能释放。倘若在应用程序中释放了非自己持有的对象就会造成崩溃。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**释放完不再需要的对象后再次释放**/</div><div class="line"></div><div class="line">//自己生成并持有对象</div><div class="line">id obj =[[NSObject alloc] init];</div><div class="line">//自己持有对象</div><div class="line">[obj release];</div><div class="line">//对象已释放</div><div class="line">[obj release];</div><div class="line">//程序崩溃</div><div class="line"></div><div class="line"></div><div class="line">/**取得对象存在，但自己不持有时释放**/</div><div class="line">id obj1 = [obj0 object];</div><div class="line">//取得的对象存在，但自己不持有对象</div><div class="line">[obj1 release];</div><div class="line">//程序崩溃</div></pre></td></tr></table></figure>
<p>如以上例子，释放非自己持有的对象会造成程序崩溃，因此绝对不要去释放非自己持有的对象。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，Apple从OS X Lion和iOS 5引入了新的内存管理功能——自动引用计数(ARC)功能。这些功能对于我们开发者说也是需要去了解的一个重要知识点。&lt;/p&gt;
&lt;h1 id=&quot;自动引用计数&quot;&gt;&lt;a href=&quot;#自动引用计数&quot; class=&quot;headerlink
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="ARC" scheme="http://yoursite.com/tags/ARC/"/>
    
  </entry>
  
  <entry>
    <title>Objc的消息发送机制与Runtime (1)</title>
    <link href="http://yoursite.com/2017/09/02/%E5%85%B3%E4%BA%8Eruntime/"/>
    <id>http://yoursite.com/2017/09/02/关于runtime/</id>
    <published>2017-09-02T04:19:55.000Z</published>
    <updated>2017-09-08T14:02:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>曾觉得iOS很好学，也想着学一段时间就可以精通这门语言，但是随着开发的越来越深入，才能意识到，iOS绝不像外表这样简单，他的内涵真是太深了，感觉自己真是一个什么也不知道的Objc小白。</p>
<p>Runtime和消息发送机制是理解iOS运行过程避不开的一道坎，虽然平时很少用，但是却是我们Objc程序员需要了解的。</p>
<h1 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h1><hr>
<p>因为Objc是一门动态语言，所以它总会在运行时（而不是编译时）进行工作。所以光有一个编译器是不够的，还需要一个运行时系统（runtime system）执行编译后代码。这便是Runtime系统，它是整个Objc运行框架的基石。</p>
<h2 id="Objc与Runtime的交互"><a href="#Objc与Runtime的交互" class="headerlink" title="Objc与Runtime的交互"></a>Objc与Runtime的交互</h2><hr>
<p><strong>objc从三种不同的层级上与Runtime系统交互，分别是</strong>：</p>
<h3 id="Objective-C-源代码"><a href="#Objective-C-源代码" class="headerlink" title="Objective-C 源代码"></a>Objective-C 源代码</h3><p>部分情况下，runtime都是系统在幕后执行，我们只需要在前台好好写Objc代码就行。</p>
<p>消息执行会使用到一些编译器为实现动态语言特性而创建的数据结构和函数。</p>
<p><strong>Objc中的类、方法和协议等在runtime中都由一些数据结构定义</strong></p>
<h3 id="NSObject的方法"><a href="#NSObject的方法" class="headerlink" title="NSObject的方法"></a>NSObject的方法</h3><p>Cocoa中大多数类都继承于<code>NSObject</code>类，所以也就继承了它的方法（NSProxy除外）。</p>
<p>NSObject中有许多的方法，自然也有许多作用，比如</p>
<ul>
<li>抽象接口作用，比如<code>description</code>方法需要重载它并为你定义的类提供描述内容。</li>
<li>在运行时获得类的信息并检查一些特性，比如<ul>
<li><code>class</code>返回对象的类</li>
<li><code>isKindOfClass:</code>和<code>isMemberofClass:</code>则检查对象是否在指定的类继承体系中。</li>
<li><code>respondsToSelector:</code>检查对象能否响应指定消息（是否有指定方法）。</li>
<li><code>conformsToProtocol</code>检查对象是否实现了指定协议方法</li>
<li><code>methodForSelector:</code>返回指定方法实现的地址</li>
</ul>
</li>
</ul>
<h3 id="Runtime的函数"><a href="#Runtime的函数" class="headerlink" title="Runtime的函数"></a>Runtime的函数</h3><p>Runtime系统是一个有一系列函数和数据结构组成，具有公共接口的动态共享库。头文件在<code>/user/include/objc</code>中。在<a href="https://developer.apple.com/documentation/objectivec/objective_c_runtime" target="_blank" rel="external">Objective-C Runtime Reference</a>中有对Runtime函数的详细文档。</p>
<h2 id="Runtime基础数据结构"><a href="#Runtime基础数据结构" class="headerlink" title="Runtime基础数据结构"></a>Runtime基础数据结构</h2><hr>
<p>在一个类似[a someFuc]的方法调用中，编译阶段编译器并不知道someFuc要实现哪一段代码而只是确定了要向接受者发送someFuc消息，只有到运行的时候，才会发送消息进行方法的确定。这里我们可以看一下objc的底层实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//main.m</div><div class="line">int main(int argc, const char * argv[])&#123;</div><div class="line">    @autoreleasepool&#123;</div><div class="line">        Person * p = [[Person alloc] init];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上函数在底层其实是这样的</p>
<p><img src="/img/objc_msgsend.jpg" alt="底层"></p>
<p>如上图所示，其实Objc所有方法在底层都会变成一个函数，那就是<code>objc_msgSend()</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id objc_msgSend ( id self, SEL op, ...);</div></pre></td></tr></table></figure>
<p>这里面有两个参数值得注意，一个是<code>id</code>，一个是<code>SEL</code>，鉴于id比较复杂，我们先讲讲<code>SEL</code></p>
<h3 id="SEL"><a href="#SEL" class="headerlink" title="SEL"></a>SEL</h3><p>它是<code>selector</code>在Objc中的表示类型。<code>selector</code>是方法选择器，相当于区分各个方法的一个ID，这个ID的数据结构就是SEL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_selector *SEL;</div></pre></td></tr></table></figure>
<p>我们可以用Objc编译器命令<code>@selector()</code>或Runtime的<code>sel_registerName</code>获得一个<code>SEL</code>类型的方法选择器。</p>
<h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>作为开发者，大家应该对id都不会陌生，它是一个指向类实例的指针</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_object *id;</div></pre></td></tr></table></figure>
<p>在这之中，<code>objc_object</code>是这样的一个结构体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//objc-private.h</div><div class="line">struct objc_object &#123;</div><div class="line">private:</div><div class="line">    isa_t isa;</div><div class="line"></div><div class="line">public:</div><div class="line"></div><div class="line">    // ISA() assumes this is NOT a tagged pointer object</div><div class="line">    Class ISA();</div><div class="line"></div><div class="line">    // getIsa() allows this to be a tagged pointer object</div><div class="line">    Class getIsa();</div><div class="line">    ... 此处省略其他方法声明</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结构体重包含一个<code>isa</code>指针，类型为<code>isa_t</code>根据<code>isa</code>就可以找到对象所属的类。</p>
<p><code>isa</code>指针又涉及到引用计数原理的知识了，这里就不做详尽描述了。</p>
<p>objc_object中又有属性值得我们注意</p>
<h4 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h4><p><code>Class</code>其实是一个指向<code>objc_class</code>结构体的指针</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_class *Class;</div></pre></td></tr></table></figure>
<p>这个<code>objc_class</code>又包含很多方法了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">struct objc_class : objc_object &#123;</div><div class="line">    // Class ISA;</div><div class="line">    Class superclass;</div><div class="line">    cache_t cache;             // formerly cache pointer and vtable</div><div class="line">    class_data_bits_t bits;    // class_rw_t * plus custom rr/alloc flags</div><div class="line">    class_rw_t *data() &#123; </div><div class="line">        return bits.data();</div><div class="line">    &#125;</div><div class="line">    ... 省略其他方法</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到<code>objc_class</code>继承于<code>objc_object</code>，所以我们可以说一个Objc类本来就是一个对象。</p>
<p>为了处理类和对象的关系，runtime创建了一种叫<strong>元类（Meta Class）</strong>的东西，<strong>类对象所属类型就叫元类</strong>，它用来表述类对象本身所具备的元数据。这就是类方法的定义，每个类仅有一个类对象，每个类也只有一个与之相关的元类。</p>
<p>当我们使用类似<code>[p alloc]</code>的类方法时，事实上是把这个消息发送给了一个类对象，这个类对象必须是一个元类的实例，而这个元类也是一个<strong>根元类(root meta class)</strong>的实例。所有元类都指向根元类为其超类。所有元类的方法列表都有能够响应消息的类方法。</p>
<p>所以当<code>[p alloc]</code>这条消息发给类对象的时候，<code>objc_msgSend()</code>会去它的元类里面去查找能够响应消息的方法，如果找到了，然后就对这个类对象执行方法调用。</p>
<p><img src="/img/超类关系图.png" alt="关系图"></p>
<p>根据上图，我们可以看到方法，类，元类的关系。有趣的是<strong>根元类</strong>的超类是<strong>根类</strong>（根类在实际运用中就是<code>NSObject</code>），<code>isa</code>指向了自己。</p>
<p>而<code>NSObject</code>的超类为<code>nil</code>，也就是说它没有超类。</p>
<p>可以看到运行时一个类还关联了它的超类指针(superclass)，类名，成员变量，方法，缓存，还有附属协议。</p>
<h5 id="cache-t"><a href="#cache-t" class="headerlink" title="cache_t"></a>cache_t</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">struct cache_t &#123;</div><div class="line">    struct bucket_t *_buckets;</div><div class="line">    mask_t _mask;</div><div class="line">    mask_t _occupied;</div><div class="line">    ... 省略其他方法</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>_buckets</code>存储<code>IMP</code>。<code>_mask</code>和<code>_occupied</code>对应<code>vtable</code>。</p>
<p><code>cache</code>是优化的一个机制，如果我们实例对象每收到一个消息都去<code>isa</code>指向的类方法列表中遍历，那效率就太低了。</p>
<p>所以系统会把调用的方法存到<code>cache</code>中，然后在收到消息后优先在<code>cache</code>中查找（理论上讲 如果一个方法被调用一次，那它就很有可能在今后还会被调用）。</p>
<p><code>bucket_t</code>中存储了指针与IMP的键值对：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">struct bucket_t &#123;</div><div class="line">private:</div><div class="line">    cache_key_t _key;</div><div class="line">    IMP _imp;</div><div class="line"></div><div class="line">public:</div><div class="line">    inline cache_key_t key() const &#123; return _key; &#125;</div><div class="line">    inline IMP imp() const &#123; return (IMP)_imp; &#125;</div><div class="line">    inline void setKey(cache_key_t newKey) &#123; _key = newKey; &#125;</div><div class="line">    inline void setImp(IMP newImp) &#123; _imp = newImp; &#125;</div><div class="line"></div><div class="line">    void set(cache_key_t newKey, IMP newImp);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>详细的细节都在<code>objc-cache.mm</code>文件中</p>
<h5 id="class-data-bits-t"><a href="#class-data-bits-t" class="headerlink" title="class_data_bits_t"></a>class_data_bits_t</h5><p><code>class_data_bits_t</code>包含的信息太多了，主要有<code>class_rw_t</code>,<code>retain/release/autorelease/retaincount</code>和<code>alloc</code>等信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//objc-runtime-new.h</div><div class="line">struct class_data_bits_t &#123;</div><div class="line"></div><div class="line">	// Values are the FAST_ flags above.</div><div class="line">	uintptr_t bits;</div><div class="line">	class_rw_t* data() &#123;</div><div class="line">	   return (class_rw_t *)(bits &amp; FAST_DATA_MASK);</div><div class="line">	&#125;</div><div class="line">... 省略其他方法</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>联系前面的<code>Class</code>，我们可以注意到<code>objc_class</code>的<code>data</code>方法返回的是<code>class_data_bits_t</code>的<code>data</code>方法，最终返回的是<code>class_rw_t</code>，有好几层。</p>
<p>在<code>class_data_bits_t</code>里又包含了一个<code>bits</code>，这个指针跟不同的<code>FAST_</code>前缀的掩码做按位与操作，可获得不同的数据。<code>bits</code>在内存中每个位的含义有三种排列顺序：</p>
<p>32位：</p>
<table>
<thead>
<tr>
<th>0</th>
<th>1</th>
<th>2-31</th>
</tr>
</thead>
<tbody>
<tr>
<td>FAST_IS_SWIFT</td>
<td>FAST_HAS_DEFAULT_RR</td>
<td>FAST_DATA_MASK</td>
</tr>
</tbody>
</table>
<p>64位兼容版：</p>
<table>
<thead>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3-46</th>
<th>47-63</th>
</tr>
</thead>
<tbody>
<tr>
<td>FAST_IS_SWIFT</td>
<td>FAST_HAS_DEFAULT_RR</td>
<td>FAST_REQUIRES_RAW_ISA</td>
<td>FAST_DATA_MASK</td>
<td>空闲</td>
</tr>
</tbody>
</table>
<p>64位不兼容：</p>
<table>
<thead>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3-46</th>
<th>47</th>
</tr>
</thead>
<tbody>
<tr>
<td>FAST_IS_WIFT</td>
<td>FAST_REQUIRES_RAW_ISA</td>
<td>FAST_HAS_CXXDTOR</td>
<td>FAST_DATA_MASK</td>
<td>FAST_HAS_CXX_CTOR</td>
</tr>
<tr>
<td>48</td>
<td>49</td>
<td>50</td>
<td>51</td>
<td>52-63</td>
</tr>
<tr>
<td>FAST_HAS_DEFAULT_AWZ</td>
<td>FAST_HAS_DEFAULT_RR</td>
<td>FAST_ALLOC</td>
<td>FAST_SHIFTED_SIZE_SHIFT</td>
<td>空闲</td>
</tr>
</tbody>
</table>
<p>64位不兼容中每个宏对应含义如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">// class is a Swift class</div><div class="line">#define FAST_IS_SWIFT           (1UL&lt;&lt;0)</div><div class="line">// class&apos;s instances requires raw isa</div><div class="line">#define FAST_REQUIRES_RAW_ISA   (1UL&lt;&lt;1)</div><div class="line">// class or superclass has .cxx_destruct implementation</div><div class="line">//   This bit is aligned with isa_t-&gt;hasCxxDtor to save an instruction.</div><div class="line">#define FAST_HAS_CXX_DTOR       (1UL&lt;&lt;2)</div><div class="line">// data pointer</div><div class="line">#define FAST_DATA_MASK          0x00007ffffffffff8UL</div><div class="line">// class or superclass has .cxx_construct implementation</div><div class="line">#define FAST_HAS_CXX_CTOR       (1UL&lt;&lt;47)</div><div class="line">// class or superclass has default alloc/allocWithZone: implementation</div><div class="line">// Note this is is stored in the metaclass.</div><div class="line">#define FAST_HAS_DEFAULT_AWZ    (1UL&lt;&lt;48)</div><div class="line">// class or superclass has default retain/release/autorelease/retainCount/</div><div class="line">//   _tryRetain/_isDeallocating/retainWeakReference/allowsWeakReference</div><div class="line">#define FAST_HAS_DEFAULT_RR     (1UL&lt;&lt;49)</div><div class="line">// summary bit for fast alloc path: !hasCxxCtor and </div><div class="line">//   !instancesRequireRawIsa and instanceSize fits into shiftedSize</div><div class="line">#define FAST_ALLOC              (1UL&lt;&lt;50)</div><div class="line">// instance size in units of 16 bytes</div><div class="line">//   or 0 if the instance size is too big in this field</div><div class="line">//   This field must be LAST</div><div class="line">#define FAST_SHIFTED_SIZE_SHIFT 51</div></pre></td></tr></table></figure>
<p>在这里除了<code>FAST_DATA_MASK</code>是用一段空间储存数据外，其他宏都是用1bit存bool值。</p>
<p><code>class_data_bits_t</code>提供了三个方法用于位操作：<code>getBit</code>,<code>setBits</code>和<code>clearBits</code></p>
<p>而<code>FAST_DATA_MASK</code>的存储区域里面其实就是存储了指向<code>class_rw_t</code>的指针</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">class_rw_t* data() &#123;</div><div class="line">   return (class_rw_t *)(bits &amp; FAST_DATA_MASK);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct category_t *Category;</div></pre></td></tr></table></figure>
<p><code>Category</code>为现有的类提供了拓展，存储了类别中可以拓展的实例方法、实例属性和类方法、类属性(objc2016新增特性)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">struct category_t &#123;</div><div class="line">    const char *name;</div><div class="line">    classref_t cls;</div><div class="line">    struct method_list_t *instanceMethods;</div><div class="line">    struct method_list_t *classMethods;</div><div class="line">    struct protocol_list_t *protocols;</div><div class="line">    struct property_list_t *instanceProperties;</div><div class="line">    // Fields below this point are not always present on disk.</div><div class="line">    struct property_list_t *_classProperties;</div><div class="line"></div><div class="line">    method_list_t *methodsForMeta(bool isMeta) &#123;</div><div class="line">        if (isMeta) return classMethods;</div><div class="line">        else return instanceMethods;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    property_list_t *propertiesForMeta(bool isMeta, struct header_info *hi);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>App 启动加载镜像文件的时候，会简介调用到<code>attachCategories</code>函数，完成向类中添加<code>Category</code>的工作。</p>
<h4 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct method_t *Method;</div></pre></td></tr></table></figure>
<p>它存储了方法名，方法类型和方法实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">struct method_t &#123;</div><div class="line">    SEL name;</div><div class="line">    const char *types;</div><div class="line">    IMP imp;</div><div class="line"></div><div class="line">    struct SortBySELAddress :</div><div class="line">        public std::binary_function&lt;const method_t&amp;,</div><div class="line">                                    const method_t&amp;, bool&gt;</div><div class="line">    &#123;</div><div class="line">        bool operator() (const method_t&amp; lhs,</div><div class="line">                         const method_t&amp; rhs)</div><div class="line">        &#123; return lhs.name &lt; rhs.name; &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>方法名类型为<code>SEL</code>，方法类型<code>types</code>是个<code>char</code>指针，存储着方法的参数类型和返回值类型。</p>
<p><code>imp</code>指向了方法实现，其实是一个函数指针。</p>
<h4 id="Ivar"><a href="#Ivar" class="headerlink" title="Ivar"></a>Ivar</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">typedef struct ivar_t *Ivar;</div><div class="line"></div><div class="line"></div><div class="line">struct ivar_t &#123;</div><div class="line">    int32_t *offset;</div><div class="line">    const char *name;</div><div class="line">    const char *type;</div><div class="line">    // alignment is sometimes -1; use alignment() instead</div><div class="line">    uint32_t alignment_raw;</div><div class="line">    uint32_t size;</div><div class="line"></div><div class="line">    uint32_t alignment() const &#123;</div><div class="line">        if (alignment_raw == ~(uint32_t)0) return 1U &lt;&lt; WORD_SHIFT;</div><div class="line">        return 1 &lt;&lt; alignment_raw;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="IMP"><a href="#IMP" class="headerlink" title="IMP"></a>IMP</h4><p><code>IMP</code>在<code>objc.h</code>中为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef void (*IMP)(void /* id, SEL, ... */);</div></pre></td></tr></table></figure>
<p>它就是一个函数指针，由编译器生成。当我们发起一个Objc消息后，最终会执行什么代码，就由这个指针指定。<code>IMP</code>这个函数指针指向了方法的实现。</p>
<h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><p>iOS Runtime真是博大精深，这还没走到最深层，就由一大堆底层概念，所以 学习之路漫漫啊。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/" target="_blank" rel="external">杨萧玉的博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;曾觉得iOS很好学，也想着学一段时间就可以精通这门语言，但是随着开发的越来越深入，才能意识到，iOS绝不像外表这样简单，他的内涵真是太深了，感觉自己真是一个什么也不知道的Objc小白。&lt;/p&gt;
&lt;p&gt;Runtime和消息发送机制是理解iOS运行过程避不开的一道坎，虽然平时很
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="runtime" scheme="http://yoursite.com/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>关于读书</title>
    <link href="http://yoursite.com/2017/08/24/%E5%85%B3%E4%BA%8E%E8%AF%BB%E4%B9%A6/"/>
    <id>http://yoursite.com/2017/08/24/关于读书/</id>
    <published>2017-08-23T16:39:37.000Z</published>
    <updated>2017-08-25T09:53:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久没看书了，一到放假，看书的效率就从一个月两三本，变成了一个月一本。有点惭愧。</p>
<p>作为韩寒的书迷，自从在我看那本从哥哥那儿借来看的新概念作文大赛开始，稚嫩的自己就喜欢上他成熟的笔风，反复读了他的很多短篇小文随笔，却一直没有看过他的第一本书《三重门》</p>
<p>于是乎就特意去书店买来一本，打算暑假慢慢品味。</p>
<p>读完后其实感觉韩寒《三重门》的文笔还是比我想象的生涩，在我看来甚至还不如他当年的《杯中窥人》，虽有对很多事情的批判，但感觉又什么都没有，如今我们看到的韩寒式幽默在当时还是没有完全展现，尤其是那个仓促的结尾和后记的那句<code>我是金子，我要闪光的</code>无不显示出他的年少轻狂。</p>
<p>不过当年的韩寒也不过高三，也只比现在的我小两岁，能有如此想法已属不易。</p>
<p>书中的林雨翔太像年少的我们了，因一点微小的成就自诩神童，身边有一位看似冷漠实则喜欢与你比较的朋友，有终日想尽办法帮助自己学业问题的父母，有一心喜爱却无法修成正果的女孩Susan，还有一个喜欢自己，自己也喜欢的老师。而正是因为太像了，所以我们才能明白这样的我们其实只是一个普通人，普通到需要父母耗尽人脉操尽心帮助自己，普通到无法与喜欢的女孩修成正果，普通到被应试教育打造成“全能人才”。</p>
<p>正巧不巧在前几天读完了钱钟书先生的《围城》，惊觉韩寒的《三重门》正是钱先生《围城》的翻版。钱先生文中的那个“归国留学回来的大学生“方鸿渐不正是韩寒文中的那个林雨翔，那个”空有一身才能的没用的人“吗？</p>
<p>不过钱先生终究是钱先生，《围城》中对于人物的关系的描写，对人物的刻画，都比《三重门》高出许多，书中所批判的社会现状，可以说至今都存留于世。书中方鸿渐对鲍小姐、苏小姐、唐小姐、孙小姐的感情刻画可谓惟妙惟肖，我们的一生又何其相似，从年少荷尔蒙冲动而爱上的鲍小姐，到拒绝已不爱之人苏小姐，再到无法得到的挚爱唐小姐，最后再与看似平凡的孙小姐结婚，起落间不都是我们的一生吗。好比张爱玲的本红玫瑰与白玫瑰里的那白月光和朱砂痣。正因为得不到，唐小姐和Susan才如此完美，正因为日夜相伴，孙小姐才如此引人烦恼。感情这件事，真是一座围城，里面的人想出来，而外面的人却想进去。钱先生真乃大家！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没看书了，一到放假，看书的效率就从一个月两三本，变成了一个月一本。有点惭愧。&lt;/p&gt;
&lt;p&gt;作为韩寒的书迷，自从在我看那本从哥哥那儿借来看的新概念作文大赛开始，稚嫩的自己就喜欢上他成熟的笔风，反复读了他的很多短篇小文随笔，却一直没有看过他的第一本书《三重门》&lt;/p&gt;
&lt;
    
    </summary>
    
    
      <category term="随想" scheme="http://yoursite.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Runloop与线程</title>
    <link href="http://yoursite.com/2017/08/23/%E5%85%B3%E4%BA%8ERunloop%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/08/23/关于Runloop与线程/</id>
    <published>2017-08-23T08:24:37.000Z</published>
    <updated>2017-09-02T07:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RunLoop"><a href="#RunLoop" class="headerlink" title="RunLoop"></a>RunLoop</h2><p>​    RunLoop是每一个iOS程序员应该都听过的一个名字，翻译过来大概是叫运行循环，在iOS攻城狮们的开发初期，几乎见不到RunLoop的身影。但它其实无处不在，最简单的例子就是Objective-C中的main函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int main(int argc, char * argv[]) &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在UIApplicationMain中，就含有一个Runloop，是系统启动时创建的Runloop。</p>
<p>它有这么几个作用：</p>
<ul>
<li>保证App程序不退出</li>
<li>监听用户行为事件</li>
<li>监听时钟事件</li>
<li>监听网络事件</li>
<li>渲染UI</li>
</ul>
<p>如果没有事件发生，Runloop则会进入休眠状态。</p>
<h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h2><p><strong>监听NSTimer</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    NSTimer * timer = [NSTimer timerWithTimeInterval:1.0 target:self selector:@selector(updataTimer) userInfo:nil repeats:YES];</div><div class="line"></div><div class="line">    [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];</div><div class="line"></div><div class="line">//相当于上面两句</div><div class="line">   [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(updataTimer) userInfo:nil repeats:YES];</div></pre></td></tr></table></figure>
<p>上面的代码是创建一个Timer，再通知Runloop每隔1s执行一次updataTimer方法</p>
<p>代码看上去虽然没什么问题，但是我们可以发现一个现象：如果我们在当前的Controller中添加了UI控件，当我们做 UI事件（触摸，拖动）时，我们可以发现每隔一秒执行方法的Timer突然停止了，当我们做完这些操作时，Timer又恢复了。</p>
<p>这一现象的出现，就牵扯到Runloop的模式了，也就是<code>[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];</code>中的Mode。</p>
<p>RunLoop有五种模式，分别是</p>
<ul>
<li>NSDefaultRunLoopMode：默认 Mode，主线程就是在这个 Mode 下运行(默认情况下运行)</li>
<li>UITrackingRunLoopMode：UI Mode，优先级最高，用于监听UI事件，当发生UI事件时，这个Mode的Runloop优先调用</li>
<li>NSRunLoopCommonModes：占位 Mode，其实不是一种真正的 Mode ，但在这一模式下，默认Mode和UI Mode都可以被调用（不会因UI操作卡住Timer操作）</li>
<li>UIInitializationRunLoopMode：在刚启动 App 时进入的第一个 Mode，启动完成后就不再使用。</li>
<li>GSEventReceiveRunLoopMode：接受系统事件的内部 Mode</li>
</ul>
<p>在五种模式中，作为开发者，最常用的其实也就前三种模式。</p>
<p>上面的几个方法中，我们的Runloop为<code>NSDefaultRunLoopMode</code>，在这种情况（默认模式）下，当发生UI事件时，系统会优先调用<code>UITrackingRunLoopMode</code>而不去管默认模式，所以才造成了Timer不执行的情况。</p>
<p>如果我们将<code>NSDefaultRunLoopMode</code>改为<code>NSRunLoopCommonModes</code>就可以解决问题。</p>
<p><strong>那么为什么苹果工程师要分UI模式和Default模式呢？</strong></p>
<p>其实很简单，有耗时操作的存在，当我们在Timer中执行耗时操作时（例如sleep等），如果用占位模式，那么当我们对UI进行操作时，就会回调Timer的方法，因为是耗时操作，就会将界面卡住。</p>
<p><strong>那么怎么既让我们在进行UI操作的时候执行回调，又不卡住界面呢？</strong></p>
<p>其实更简单，因为App中的线程不止主线程一个，在苹果漫长的开发中，苹果工程师将UI界面放在了主线程单线程执行，所以，只要我们把耗时操作放到子线程执行，就不会再出现卡住的情况了</p>
<h2 id="线程与RunLoop"><a href="#线程与RunLoop" class="headerlink" title="线程与RunLoop"></a>线程与RunLoop</h2><p>我们先创建一个自定义线程类，来重写它的-dealloc方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//LYC_Thread.h</div><div class="line">-(void)dealloc&#123;</div><div class="line">    NSLog(@&quot;线程结束&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再进行线程创建</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//ViewController.m</div><div class="line">#import &quot;LYC_Thread.h&quot;</div><div class="line">@interface ViewController ()</div><div class="line">@property (nonatomic,strong) LYC_Thread *thread;        /**&lt; 线程  */</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    _thread = [[LYC_Thread alloc]initWithBlock:^&#123;</div><div class="line">            NSTimer * timer = [NSTimer timerWithTimeInterval:1.0 target:self selector:@selector(updataTimer) userInfo:nil repeats:YES];</div><div class="line">            [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];</div><div class="line">        NSLog(@&quot;线程执行&quot;);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [_thread start];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (void)updataTimer &#123;</div><div class="line">    NSLog(@&quot;耗时操作&quot;);</div><div class="line">    [NSThread sleepForTimeInterval:1.0];</div><div class="line">    NSLog(@&quot;执行完毕&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>乍一看似乎没有问题，然而当我们运行时发现，操作台的打印效果是这样</p>
<p><img src="/img/Thread.png" alt="操作台"></p>
<p>通过几个方法，我们可以看到，<code>NSThread</code>并没有被释放，但是却并没有执行耗时操作，这是为什么呢？</p>
<p>这是因为这个<code>NSThread</code>只是一个对象，而不是线程的本身。</p>
<p>线程是CPU去调用的，CPU负责在线程池里拿出一条线程去执行<code>NSThread</code>的任务，一旦结束，线程便没有了。</p>
<p>所以我们要让线程长期存在，并不是去强引用<code>NSThread</code>，而是让NSThread有执行不完的任务，这样，线程才会一直存在。</p>
<p>于是我们加入一个死循环在thread中并取消对<code>LYC_Thread</code>的强引用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//ViewController.m</div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">        </div><div class="line">    LYC_Thread *thread = [[LYC_Thread alloc]initWithBlock:^&#123;</div><div class="line">            NSTimer * timer = [NSTimer timerWithTimeInterval:1.0 target:self selector:@selector(updataTimer) userInfo:nil repeats:YES];</div><div class="line">        while (true) &#123;</div><div class="line">            </div><div class="line">        &#125;;</div><div class="line">            [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];</div><div class="line">        NSLog(@&quot;线程执行&quot;);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [thread start];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时控制台什么也没有打印，也就是说NSThread并没有被释放，也证明了线程并没有被回收</p>
<p>但是，我们加入死循环时，是没有加入事件的。那如果我们在加入死循环时还想加入事件，怎么办呢？</p>
<p>前面我们说到，<code>RunLoop</code>的作用相当于一个死循环，而且<code>RunLoop</code>还可以监听各种事件。</p>
<p>所以，实现这种需求，<code>RunLoop</code>最为合适。</p>
<p>其实每一条<strong>线程</strong>里都默认有一个<code>RunLoop</code>，只不过默认不开启。我们可以使用<code>[[NSRunLoop currentRunLoop] run];</code>语句对<code>RunLoop</code>进行开启。</p>
<p>开启之后，我们的控制台就会输出这样的信息：</p>
<p><img src="/img/控制台.png" alt="控制台信息"></p>
<p>我们可以发现，”线程执行”语句没有输出，也证明了<code>RunLoop</code>相当于是一个死循环</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>除了开启和运用RunLoop，我们还应该知道如何去关闭RunLoop</p>
<ul>
<li>用<code>[[NSRunLoop currentRunLoop] runUntilDate:]</code>方法，可以设定循环的时间</li>
<li>用<code>[NSThread exit]</code>关闭<code>NSThread</code>线程对象</li>
</ul>
<p>另外，其实主线程和子线程差别也没那么多（本质上应该是相同的）。</p>
<p>我们新建一个子线程后，当我们关闭主线程，子线程仍然能够独立运行，只是主线程的UI不再相应了。</p>
<p>前面提到的<code>在苹果漫长的开发中，苹果工程师将UI界面放在了主线程单线程执行</code>就是主线程与子线程的区别。</p>
<p>如果我们多线程操作UI，那么就会发生<strong>资源抢夺</strong>情况，如果要解决这种情况，就需要进行上锁操作。</p>
<p>苹果工程师们在<code>多线程上锁</code>和<code>主线程单线程执行</code>的选择中，选择了后者。</p>
<p>所以UIKit框架下的控件我们都使用<code>nonatomic</code>非原子属性修饰。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RunLoop&quot;&gt;&lt;a href=&quot;#RunLoop&quot; class=&quot;headerlink&quot; title=&quot;RunLoop&quot;&gt;&lt;/a&gt;RunLoop&lt;/h2&gt;&lt;p&gt;​    RunLoop是每一个iOS程序员应该都听过的一个名字，翻译过来大概是叫运行循环，在iOS
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="RunLoop" scheme="http://yoursite.com/tags/RunLoop/"/>
    
  </entry>
  
  <entry>
    <title>iOS的本地推送</title>
    <link href="http://yoursite.com/2017/08/11/iOS%E7%9A%84%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/"/>
    <id>http://yoursite.com/2017/08/11/iOS的本地推送/</id>
    <published>2017-08-11T09:27:09.000Z</published>
    <updated>2017-08-13T15:23:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>iOS的推送有本地推送和远程推送两种，由于项目只需要个提示类型的，所以用本地推送就够了，所以在这里，介绍的都是iOS的本地推送。</p>
<h2 id="推送准备"><a href="#推送准备" class="headerlink" title="推送准备"></a>推送准备</h2><p>要进行iOS推送之前，需要几个准备步骤，才能进行推送行为。</p>
<ul>
<li>首先，我们需要打开Push Notification开关</li>
</ul>
<p><img src="/img/Push notification.png" alt="Push Notification"></p>
<p>打开之后，系统会生成一个.entitlements文件</p>
<h3 id="注册通知"><a href="#注册通知" class="headerlink" title="注册通知"></a>注册通知</h3><p>因为没用第三方(穷)，于是选择使用了iOS自带的推送，如果用自带推送就需要以下几个步骤注册通知</p>
<ul>
<li><p>1、导入头文件<code>&lt;UserNotifications/UserNotifications.h&gt;</code>以及遵守<code>&lt;UNUserNotificationCenterDelegate&gt;</code>协议</p>
<p>因为兼容性的考虑，头文件最好写成这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#ifdef NSFoundationVersionNumber_iOS_9_x_Max</div><div class="line">#import &lt;UserNotifications/UserNotifications.h&gt;</div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>2、我们需要注册通知（需在<code>Appdelegate</code>中的<code>-(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code>注册）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"> if ([[UIDevice currentDevice].systemVersion floatValue] &gt;= 10.0) &#123;</div><div class="line">        //iOS10特有</div><div class="line">        UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];</div><div class="line"></div><div class="line">        center.delegate = self;</div><div class="line">        [center requestAuthorizationWithOptions:(UNAuthorizationOptionAlert | UNAuthorizationOptionBadge | UNAuthorizationOptionSound) completionHandler:^(BOOL granted, NSError * _Nullable error) &#123;</div><div class="line">            if (granted) &#123;</div><div class="line">                // 点击允许</div><div class="line">                NSLog(@&quot;注册成功&quot;);</div><div class="line">                [center getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) &#123;</div><div class="line">                    NSLog(@&quot;%@&quot;, settings);</div><div class="line">                &#125;];</div><div class="line">            &#125; else &#123;</div><div class="line">                // 点击不允许</div><div class="line">                NSLog(@&quot;注册失败&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line">    &#125;else if ([[UIDevice currentDevice].systemVersion floatValue] &gt;=8.0)&#123;</div><div class="line">        //iOS8 - iOS10</div><div class="line">        [application registerUserNotificationSettings:[UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert | UIUserNotificationTypeSound | UIUserNotificationTypeBadge categories:nil]];</div><div class="line">        </div><div class="line">    &#125;else if ([[UIDevice currentDevice].systemVersion floatValue] &lt; 8.0) &#123;</div><div class="line">        //iOS8系统以下</div><div class="line">        [application registerForRemoteNotificationTypes:UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeSound];</div><div class="line">    &#125;</div><div class="line">    // 注册获得device Token</div><div class="line">    [[UIApplication sharedApplication] registerForRemoteNotifications];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>获取DeviceToken</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#pragma  mark - 获取device Token</div><div class="line">//获取DeviceToken成功</div><div class="line">- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken&#123;</div><div class="line"></div><div class="line">    //正确写法</div><div class="line">    NSString *deviceString = [[deviceToken description] stringByTrimmingCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@&quot;&lt;&gt;&quot;]];</div><div class="line">    deviceString = [deviceString stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;];</div><div class="line"></div><div class="line">    NSLog(@&quot;deviceToken===========%@&quot;,deviceString);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//获取DeviceToken失败</div><div class="line">- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error&#123;</div><div class="line">    NSLog(@&quot;[DeviceToken Error]:%@\n&quot;,error.description);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>值得一提的是iOS10更新后，在<code>&lt;UNUserNotificationCenterDelegate&gt;</code>中有两个处理通知接受和点击事件的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@protocol UNUserNotificationCenterDelegate &lt;NSObject&gt;</div><div class="line"></div><div class="line">@optional</div><div class="line"></div><div class="line">// The method will be called on the delegate only if the application is in the foreground. If the method is not implemented or the handler is not called in a timely manner then the notification will not be presented. The application can choose to have the notification presented as a sound, badge, alert and/or in the notification list. This decision should be based on whether the information in the notification is otherwise visible to the user.</div><div class="line">- (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler __IOS_AVAILABLE(10.0) __TVOS_AVAILABLE(10.0) __WATCHOS_AVAILABLE(3.0);</div><div class="line"></div><div class="line">// The method will be called on the delegate when the user responded to the notification by opening the application, dismissing the notification or choosing a UNNotificationAction. The delegate must be set before the application returns from applicationDidFinishLaunching:.</div><div class="line">- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)())completionHandler __IOS_AVAILABLE(10.0) __WATCHOS_AVAILABLE(3.0) __TVOS_PROHIBITED;</div><div class="line">@end</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在iOS10里面，本地通知与远程通知合二为一，在新的UNPushNotificationTrigger这个新类中，我们可以得到一些触发条件</p>
<ul>
<li>UNPushNotificationTrigger(远程通知) ：远程推送的通知类型</li>
<li>UNTimeIntervalNotificationTrigger(本地通知)：一定时间后，重复或不重复推送通知</li>
<li>UNCalendarNotificationTrigger(本地通知)：在一固定日期，重复或不重复推送</li>
<li>UNLocationNotificationTrigger(本地通知)：地理位置的一种通知，当用户进入或离开一个地理区域来通知。</li>
</ul>
<p>iOS10中接受通知回调是这样用的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// iOS 10收到通知</div><div class="line">- (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler&#123;</div><div class="line">    NSDictionary * userInfo = notification.request.content.userInfo;</div><div class="line">    UNNotificationRequest *request = notification.request; // 收到推送的请求</div><div class="line">    UNNotificationContent *content = request.content; // 收到推送的消息内容</div><div class="line">    NSNumber *badge = content.badge;  // 推送消息的角标</div><div class="line">    NSString *body = content.body;    // 推送消息体</div><div class="line">    UNNotificationSound *sound = content.sound;  // 推送消息的声音</div><div class="line">    NSString *subtitle = content.subtitle;  // 推送消息的副标题</div><div class="line">    NSString *title = content.title;  // 推送消息的标题</div><div class="line"></div><div class="line">    if([notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) &#123;</div><div class="line">        NSLog(@&quot;iOS10 前台收到远程通知:%@&quot;, [self logDic:userInfo]);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        // 判断为本地通知</div><div class="line">        NSLog(@&quot;iOS10 前台收到本地通知:&#123;\\\\nbody:%@，\\\\ntitle:%@,\\\\nsubtitle:%@,\\\\nbadge：%@，\\\\nsound：%@，\\\\nuserInfo：%@\\\\n&#125;&quot;,body,title,subtitle,badge,sound,userInfo);</div><div class="line">    &#125;</div><div class="line">    completionHandler(UNNotificationPresentationOptionBadge|UNNotificationPresentationOptionSound|UNNotificationPresentationOptionAlert); // 需要执行这个方法，选择是否提醒用户，有Badge、Sound、Alert三种类型可以设置</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>// 通知的点击事件</p>
<ul>
<li><p>(void)userNotificationCenter:(UNUserNotificationCenter <em>)center didReceiveNotificationResponse:(UNNotificationResponse </em>)response withCompletionHandler:(void(^)())completionHandler{</p>
<p>  NSDictionary <em> userInfo = response.notification.request.content.userInfo;<br>  UNNotificationRequest </em>request = response.notification.request; // 收到推送的请求<br>  UNNotificationContent <em>content = request.content; // 收到推送的消息内容<br>  NSNumber </em>badge = content.badge;  // 推送消息的角标<br>  NSString <em>body = content.body;    // 推送消息体<br>  UNNotificationSound </em>sound = content.sound;  // 推送消息的声音<br>  NSString <em>subtitle = content.subtitle;  // 推送消息的副标题<br>  NSString </em>title = content.title;  // 推送消息的标题<br>  if([response.notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {</p>
<pre><code>NSLog(@&quot;iOS10 收到远程通知:%@&quot;, [self logDic:userInfo]);
</code></pre><p>  }<br>  else {</p>
<pre><code>// 判断为本地通知
NSLog(@&quot;iOS10 收到本地通知:{\\\\nbody:%@，\\\\ntitle:%@,\\\\nsubtitle:%@,\\\\nbadge：%@，\\\\nsound：%@，\\\\nuserInfo：%@\\\\n}&quot;,body,title,subtitle,badge,sound,userInfo);
</code></pre><p>  }</p>
<p>  // Warning: UNUserNotificationCenter delegate received call to -userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler: but the completion handler was never called.<br>  completionHandler();  // 系统要求执行这个方法</p>
</li>
</ul>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">**这里需要提到的是，如果我们不写completionHandler（）这个方法，可能会报错误**</div><div class="line"></div><div class="line">* 在iOS10之前，本地通知创建是这样的：</div><div class="line"></div><div class="line">```objective-c</div><div class="line">- (void)sendLocalNotifi &#123; </div><div class="line">// 添加本地通知</div><div class="line">     UILocalNotification *localNoti = [[UILocalNotification alloc] init];</div><div class="line">     NSDate *Date = [NSDate date];</div><div class="line">     localNoti.fireDate = Date; // 发送通知时间 这里没做具体处理，若是要推送时间无误差，时间要精确到秒。</div><div class="line">     localNoti.timeZone = [NSTimeZone localTimeZone];     // 设置时区 默认时区</div><div class="line">     localNoti.repeatInterval = NSCalendarUnitSecond;     // 发送通知的间隔</div><div class="line">     localNoti.alertTitle = @&quot;iOS10之前的本地通知&quot;;                      // 弹窗title</div><div class="line">     localNoti.alertBody = @&quot;搞事了搞事了&quot;;               // 弹窗body显示内容</div><div class="line"></div><div class="line">     localNoti.soundName = UILocalNotificationDefaultSoundName;</div><div class="line">     localNoti.alertLaunchImage = @&quot;1.jpg&quot;; // 用于点击启动显示启动页，必须是 UILaunchImageFile</div><div class="line">     localNoti.userInfo = [NSDictionary dictionaryWithObjectsAndKeys:@&quot;value&quot;, @&quot;key&quot;, nil];</div><div class="line">     //    localNoti.soundName = @&quot;1&quot;;                       // 响铃音乐文件名称， 放在main bundle 里边</div><div class="line">      localNoti.applicationIconBadgeNumber = 2;         // app 的未读消息个数</div><div class="line"></div><div class="line"></div><div class="line">     [[UIApplication sharedApplication] cancelAllLocalNotifications];</div><div class="line">     [[UIApplication sharedApplication] scheduleLocalNotification:localNoti];    // 按照指定时间发送通知</div><div class="line">     // [[UIApplication sharedApplication] presentLocalNotificationNow:localNoti];  // 立即发送通知</div><div class="line"></div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>而在iOS10之后，通知创建变成了这样：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">UNMutableNotificationContent *content = [[UNMutableNotificationContent alloc] init];</div><div class="line">    content.title = @&quot;iOS10之后啦&quot;;</div><div class="line">    content.subtitle = @&quot;搞事了&quot;;</div><div class="line">    content.body = @&quot;123~&quot;;</div><div class="line">    content.badge = @0;</div><div class="line">    NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;image1&quot; ofType:@&quot;png&quot;];</div><div class="line">    NSError *error = nil;</div><div class="line">//将本地图片的路径形成一个图片附件，加入到content中</div><div class="line">    UNNotificationAttachment *img_attachment = [UNNotificationAttachment attachmentWithIdentifier:@&quot;att1&quot; URL:[NSURL fileURLWithPath:path] options:nil error:&amp;error];</div><div class="line">    if (error) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;, error);</div><div class="line">    &#125;</div><div class="line">    content.attachments = @[img_attachment];</div><div class="line">    //设置为@&quot;&quot;以后，进入app将没有启动页</div><div class="line">    content.launchImageName = @&quot;&quot;;</div><div class="line">    UNNotificationSound *sound = [UNNotificationSound defaultSound];</div><div class="line">    content.sound = sound;</div><div class="line">    //设置时间间隔的触发器</div><div class="line">    UNTimeIntervalNotificationTrigger *time_trigger = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:10 repeats:NO];</div><div class="line">    NSString *requestIdentifer = @&quot;time interval request&quot;;</div><div class="line">    content.categoryIdentifier = @&quot;&quot;;</div><div class="line">    UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:requestIdentifer content:content trigger:time_trigger];</div><div class="line">    [[UNUserNotificationCenter currentNotificationCenter] addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;,error);</div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此，本地通知创建就结束了，经过测试发现</p>
<ul>
<li>iOS10之前的推送，app在前台的时候，通知虽然会执行回调，但是并不会在主界面显示推送按钮</li>
<li>iOS10之前的推送，现在仍可以使用，感觉还挺方便的。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Neo_joke的<a href="http://www.jianshu.com/p/9c9035212af0" target="_blank" rel="external">简书文章</a></p>
<p>徐不同的<a href="http://www.jianshu.com/p/f5337e8f336d" target="_blank" rel="external">简书文章</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;iOS的推送有本地推送和远程推送两种，由于项目只需要个提示类型的，所以用本地推送就够了，所以在这里，介绍的都是iOS的本地推送。&lt;/p&gt;
&lt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="推送" scheme="http://yoursite.com/tags/%E6%8E%A8%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>关于iBeacon</title>
    <link href="http://yoursite.com/2017/08/06/%E5%85%B3%E4%BA%8EiBeacon/"/>
    <id>http://yoursite.com/2017/08/06/关于iBeacon/</id>
    <published>2017-08-06T10:54:02.000Z</published>
    <updated>2017-08-11T06:35:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为最近在做的项目是关于蓝牙连接的项目，前辈在做这个项目的时候，除了用ReactiveCocoa以外，还使用了iBeacon技术。</p>
<p>对于从未接触蓝牙这块的我，感觉打开了新世界大门。</p>
<h2 id="iBeacon"><a href="#iBeacon" class="headerlink" title="iBeacon"></a>iBeacon</h2><p>iBeacon是基于地理位置的微定位技术，使用的是Apple提供的CoreLocation（BLE使用的是CoreBluetooth）。根据名字，应该很清楚，使用iBeacon是需要开启定位的，而使用BLE只需要开启蓝牙。  </p>
<h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><ul>
<li>UUID：UUID是Universally UniqueIdentifier（通用唯一标识符）的缩写，实际上是一个随机字符串。在iBeacon中，UUID通常用于表示顶层标识，如果生成一个UUID给iBeacon设备，那么一个设备检测到你的iBeacon时，它就知道它是在和哪个iBeacon通信了。</li>
<li>major：用于将相关的beacon标识为一组。</li>
<li>minor：用于标识特定的beacon设备，每个设备都有唯一的minor编号。</li>
</ul>
<p>下面用一个商场的例子来解释这三个术语</p>
<p>你用有特定UUID的设备与商场里的UUID设备进行通信，一个商店中的所有设备都会被分配到相同的major编号，应用程序根据major编号，就可以知道你大概在哪个商店。而每个商店的每个beacon设备都有唯一的minor编号，那程序通过这个minor编号，就知道你位于商店的某一个位置</p>
<h2 id="iBeacon属性"><a href="#iBeacon属性" class="headerlink" title="iBeacon属性"></a>iBeacon属性</h2><p>iOS中的ibeacon通信数据有</p>
<ul>
<li>（NSUUID）ProximityUUID</li>
<li>（NSNumber）major</li>
<li>（NSNumber）minor</li>
<li>（CLProximity）proximity</li>
<li>（CLLocationAccuracy）accuracy</li>
<li>(NSInteger) rssi</li>
</ul>
<p>分别含义是：</p>
<ul>
<li>proximityUUID、major、minor表示ibeacon的uuid、major、minor</li>
<li>proximity是Apple提供的几个表示距离的属性<ul>
<li>CLProximityUnknown-没有数据</li>
<li>CLProximityImmediate-十厘米以内</li>
<li>CLProximityNear-一米以内</li>
<li>CLProximityFar-一米以外</li>
</ul>
</li>
<li>accuracy表示大约距离</li>
<li>RSSI表示信号强度</li>
</ul>
<p>根据属性我们可以看到，Apple的判断方式很有趣，它并不去仔细推断距离，而是使用贴近（Immediate）、一米以内（Near）、一米以外（Far）三种状态。距离在1m以内时，RSSI值基本上成比例减少，而在1米以上时，由于各种因素，RSSI是上下波动状态，所以无法推断距离，判定为Far</p>
<h2 id="iBeacon方法"><a href="#iBeacon方法" class="headerlink" title="iBeacon方法"></a>iBeacon方法</h2><p>Apple在iOS4中增加了地理围栏API，可以用来在设备进出某个区域时获得通知，包括了：</p>
<ul>
<li>-startMonitoringForRegion:</li>
<li>-locationManager:didEnterRegion:</li>
<li>-locationManager:didExitRegion:</li>
</ul>
<p>这种检测iBeacon的方式叫做<strong>monitoring</strong>。</p>
<p>用这几种方法可以使程序在后台运行时检测iBeacon，但是只能同时检测20个Region，且不能推测设备与Beacon的距离。</p>
<p>除了使用地理围栏API，Apple还在iOS7中新增加了iBeacon的专用检测方式，也就是<strong>ranging</strong></p>
<p>通过<strong>CLLocationManager</strong>的方法</p>
<ul>
<li><code>-startRangingBeaconsInRegion:</code> 检测特定iBeacon。</li>
</ul>
<p>当检测到beacon的时候，<strong>CLLocationManager</strong>的delegate </p>
<ul>
<li><code>-locationManager：didRangeBeacons:inRegion:</code>会被调用，通知调用者被检测到的beacons。这个方法会返回一个<strong>CLbeacon</strong>数组，根据里面的<strong>proximity</strong>(上文所提到的属性)就可以判断设备与beacon之间的距离。</li>
</ul>
<h2 id="iBeacon行为"><a href="#iBeacon行为" class="headerlink" title="iBeacon行为"></a>iBeacon行为</h2><p>根据<a href="https://tech.meituan.com/" target="_blank" rel="external">美团点评技术团队</a>的文章，暂时有以下结论</p>
<ul>
<li>检测到beacon的时间跟设备进行蓝牙扫描的时间间隔有关，每当设备扫描时，就能发现iBeacon region的变化。</li>
<li>在rangging打开的情况下，设备会每秒钟做一次扫描，也就是说状态更新最多延迟一秒。</li>
<li>程序在后台运行，并且monitoring打开的时候，设备可能每隔数分钟做一次扫描。iOS7响应较慢，iOS7.1后有较大改善。</li>
<li>如果存在设置<code>notifyEnterStateOnDisplay=yes</code>的beacon，iOS会在屏幕从黑屏点亮的时候进行一次扫描。</li>
<li>设备重启并不影响iBeacon后台检测的执行</li>
<li>iOS7中，在多任务界面中杀掉程序会终止iBeacon检测的执行，iOS7.1改变了这一行为，被杀掉的app还可以继续进行iBeacon的检测。</li>
</ul>
<p>在才接触这个项目的初期，好奇于项目与我事先准备的BLE协议实现有些区别，后来了解到用到了iBeacon技术，起初好奇为什么锁屏点亮和锁屏黑屏有什么区别，以为只是因为亮屏可能会激活后台。后来在了解了iBeacon之后，才知道，还有这种操作。所以啊，我们永远都不能放弃学习~。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>美团点评技术团队：<a href="https://tech.meituan.com/iBeacaon-first-glance.html" target="_blank" rel="external">iBeacon初探</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为最近在做的项目是关于蓝牙连接的项目，前辈在做这个项目的时候，除了用ReactiveCocoa以外，还使用了iBeacon技术。&lt;/p&gt;
&lt;p&gt;对于从未接触蓝牙这块的我，感觉打开了新世界大门。&lt;/p&gt;
&lt;h2 id=&quot;iBeacon&quot;&gt;&lt;a href=&quot;#iBeacon&quot;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="iBeacon" scheme="http://yoursite.com/tags/iBeacon/"/>
    
  </entry>
  
  <entry>
    <title>项目里的ReactiveCocoa</title>
    <link href="http://yoursite.com/2017/07/28/%E9%A1%B9%E7%9B%AE%E9%87%8C%E7%9A%84ReactiveCocoa/"/>
    <id>http://yoursite.com/2017/07/28/项目里的ReactiveCocoa/</id>
    <published>2017-07-28T10:59:44.000Z</published>
    <updated>2017-08-11T10:02:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>​    最近做了一个蓝牙相关的项目，项目的前辈当时是用的ReactiveCocoa（RAC）做的，才开始接手的时候，看的一头雾水。经过一段时间自学，现在对RAC略知一二。</p>
<h2 id="FunctionalReactiveProgramming"><a href="#FunctionalReactiveProgramming" class="headerlink" title="FunctionalReactiveProgramming"></a>FunctionalReactiveProgramming</h2><p>FRP是一种响应变化的编程范式。<img src="/img/FRP.png" alt="FRP"></p>
<p>就像上面的登录界面，在用户输入用户名和密码之前，登陆按钮是处于无法点击状态的，只有当用户名和密码都被填入一定值的时候，才可以点击登陆按钮。这种一个按钮会由于另外几个控件的改变而改变的联动就是FRP。</p>
<h2 id="ReactiveCocoa"><a href="#ReactiveCocoa" class="headerlink" title="ReactiveCocoa"></a>ReactiveCocoa</h2><p>RAC是github上的一个开源项目，可以说是将响应式编程做到了极致。RAC中，通过<strong>RACsignal</strong>来发送信号以执行各种操作</p>
<p>在这里，<a href="limboy.me">limboy(李忠)</a> 的文章里写的很好</p>
<p>他把信号比作水龙头，但是水龙头里装的是直径与水龙头内径一样的玻璃球(Value)，这样，玻璃球就是依次出来的（没有并发）。水龙头是关着的，需要有接收方（Subscriber）打开，这样只要有玻璃球(Value)出现，就会自动给接收方(subscriber)。还可以在水龙头上加一个滤嘴(Filter)，不符合的东西也不让过。还可以加一个改动装置，把球改成符合自己的需求（map）。也可以合并多个水龙头(combineLastest:reduce:)，这样只有有一个水龙头出玻璃球，这个新水龙头的接收方就会得到这个球。</p>
<p>比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//filter某个属性满足一定条件才执行。  </div><div class="line"></div><div class="line">  [[RACObserve(self, count) filter:^BOOL(id count) &#123;</div><div class="line">  if ([count integerValue] == 5) &#123;            </div><div class="line">		return YES;        &#125;</div><div class="line">	else&#123;           </div><div class="line">	 	return NO;        </div><div class="line">	&#125;   </div><div class="line"> &#125;]subscribeNext:^(id count) &#123;//上面return YES 才执行   </div><div class="line"></div><div class="line"> NSLog(@&quot;数量为===%@&quot;,count);    &#125;];</div></pre></td></tr></table></figure>
<p>RAC还在<strong>UIButton、UITextFiled</strong>等的Category中添加了很多方法，可以直接设置事件。</p>
<h2 id="统一了KVO-Event-Notification等的处理"><a href="#统一了KVO-Event-Notification等的处理" class="headerlink" title="统一了KVO Event Notification等的处理"></a>统一了KVO Event Notification等的处理</h2><blockquote>
<p>KVO</p>
</blockquote>
<p>RAC中监听属性改变不再像KVO中用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">而是使用block</div><div class="line"></div><div class="line">```iOS</div><div class="line">// 只有当名字以&apos;j&apos;开头，才会被记录</div><div class="line">[[RACAble(self.username) filter:^(NSString *newName) &#123;</div><div class="line">       return [newName hasPrefix:@&quot;j&quot;];</div><div class="line">   &#125;]</div><div class="line">   subscribeNext:^(NSString *newName) &#123;</div><div class="line">       NSLog(@&quot;%@&quot;, newName);</div><div class="line">   &#125;];</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Notification</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[NSNotificationCenter defaultCenter]rac_addObserverForName:@&quot;ReceiveData&quot; object:nil] subscribeNext:^(NSNotification * _Nullable x) &#123;</div><div class="line">                NSlog(@&quot;%@&quot;,x);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="冷热信号"><a href="#冷热信号" class="headerlink" title="冷热信号"></a>冷热信号</h2><p>上面提到的只有subscriber订阅时才生效的信号叫做<strong>冷信号</strong></p>
<p>有冷信号，自然就有<strong>热信号</strong></p>
<ul>
<li>热信号是主动的，不管你有没有订阅事件，它会时刻推送。</li>
<li>热信号可以有多个订阅者，信号和订阅者可以共享信息，多个订阅者可以在订阅开始时同时接收到这个时间及以后的信号（热信号创建时若没有订阅者，它仍然会进行信号发送），而冷信号多个订阅者订阅时，是将信号完整的分别发送给订阅者。</li>
</ul>
<p>冷热信号的区分，美团点评技术团队的<a href="https://tech.meituan.com/talk-about-reactivecocoas-cold-signal-and-hot-signal-part-1.html" target="_blank" rel="external">细说ReactiveCocoa的冷热信号</a>文章写的非常的好。</p>
<p>因为项目的需要，本人还在不断学习，归纳的东西还不够成熟，希望自己能加油吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    最近做了一个蓝牙相关的项目，项目的前辈当时是用的ReactiveCocoa（RAC）做的，才开始接手的时候，看的一头雾水。经过一段时间自学，现在对RAC略知一二。&lt;/p&gt;
&lt;h2 id=&quot;FunctionalReactiveProgramming&quot;&gt;&lt;a href
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="RAC" scheme="http://yoursite.com/tags/RAC/"/>
    
  </entry>
  
  <entry>
    <title>随想</title>
    <link href="http://yoursite.com/2017/07/24/%E9%9A%8F%E6%83%B3/"/>
    <id>http://yoursite.com/2017/07/24/随想/</id>
    <published>2017-07-24T05:54:47.000Z</published>
    <updated>2017-08-27T16:23:23.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>本来按理说像我这样的肚子里没有诗歌文学，脑子里没有代码技术的人，是不需要开博客的。
</code></pre><p>​<br>​<br>​    </p>
<pre><code>后来想了一想，有些东西还是写出来好一点，索性就花了点时间创建了这个博客来监督自己。
</code></pre><p>​<br>​    </p>
<pre><code>如果能帮到你，乃是我的荣幸。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;本来按理说像我这样的肚子里没有诗歌文学，脑子里没有代码技术的人，是不需要开博客的。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​&lt;br&gt;​&lt;br&gt;​    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;后来想了一想，有些东西还是写出来好一点，索性就花了点时间创建了这个博客来监督自己
    
    </summary>
    
    
      <category term="随想" scheme="http://yoursite.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿灿的随想录</title>
  <subtitle>物极必反，否极泰来</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-13T15:23:22.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Rues</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS的本地推送</title>
    <link href="http://yoursite.com/2017/08/11/iOS%E7%9A%84%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/"/>
    <id>http://yoursite.com/2017/08/11/iOS的本地推送/</id>
    <published>2017-08-11T09:27:09.000Z</published>
    <updated>2017-08-13T15:23:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>iOS的推送有本地推送和远程推送两种，由于项目只需要个提示类型的，所以用本地推送就够了，所以在这里，介绍的都是iOS的本地推送。</p>
<h2 id="推送准备"><a href="#推送准备" class="headerlink" title="推送准备"></a>推送准备</h2><p>要进行iOS推送之前，需要几个准备步骤，才能进行推送行为。</p>
<ul>
<li>首先，我们需要打开Push Notification开关</li>
</ul>
<p><img src="/img/Push notification.png" alt="Push Notification"></p>
<p>打开之后，系统会生成一个.entitlements文件</p>
<h3 id="注册通知"><a href="#注册通知" class="headerlink" title="注册通知"></a>注册通知</h3><p>因为没用第三方(穷)，于是选择使用了iOS自带的推送，如果用自带推送就需要以下几个步骤注册通知</p>
<ul>
<li><p>1、导入头文件<code>&lt;UserNotifications/UserNotifications.h&gt;</code>以及遵守<code>&lt;UNUserNotificationCenterDelegate&gt;</code>协议</p>
<p>因为兼容性的考虑，头文件最好写成这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#ifdef NSFoundationVersionNumber_iOS_9_x_Max</div><div class="line">#import &lt;UserNotifications/UserNotifications.h&gt;</div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>2、我们需要注册通知（需在<code>Appdelegate</code>中的<code>-(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code>注册）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"> if ([[UIDevice currentDevice].systemVersion floatValue] &gt;= 10.0) &#123;</div><div class="line">        //iOS10特有</div><div class="line">        UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];</div><div class="line"></div><div class="line">        center.delegate = self;</div><div class="line">        [center requestAuthorizationWithOptions:(UNAuthorizationOptionAlert | UNAuthorizationOptionBadge | UNAuthorizationOptionSound) completionHandler:^(BOOL granted, NSError * _Nullable error) &#123;</div><div class="line">            if (granted) &#123;</div><div class="line">                // 点击允许</div><div class="line">                NSLog(@&quot;注册成功&quot;);</div><div class="line">                [center getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) &#123;</div><div class="line">                    NSLog(@&quot;%@&quot;, settings);</div><div class="line">                &#125;];</div><div class="line">            &#125; else &#123;</div><div class="line">                // 点击不允许</div><div class="line">                NSLog(@&quot;注册失败&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line">    &#125;else if ([[UIDevice currentDevice].systemVersion floatValue] &gt;=8.0)&#123;</div><div class="line">        //iOS8 - iOS10</div><div class="line">        [application registerUserNotificationSettings:[UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert | UIUserNotificationTypeSound | UIUserNotificationTypeBadge categories:nil]];</div><div class="line">        </div><div class="line">    &#125;else if ([[UIDevice currentDevice].systemVersion floatValue] &lt; 8.0) &#123;</div><div class="line">        //iOS8系统以下</div><div class="line">        [application registerForRemoteNotificationTypes:UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeSound];</div><div class="line">    &#125;</div><div class="line">    // 注册获得device Token</div><div class="line">    [[UIApplication sharedApplication] registerForRemoteNotifications];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>获取DeviceToken</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#pragma  mark - 获取device Token</div><div class="line">//获取DeviceToken成功</div><div class="line">- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken&#123;</div><div class="line"></div><div class="line">    //正确写法</div><div class="line">    NSString *deviceString = [[deviceToken description] stringByTrimmingCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@&quot;&lt;&gt;&quot;]];</div><div class="line">    deviceString = [deviceString stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;];</div><div class="line"></div><div class="line">    NSLog(@&quot;deviceToken===========%@&quot;,deviceString);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//获取DeviceToken失败</div><div class="line">- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error&#123;</div><div class="line">    NSLog(@&quot;[DeviceToken Error]:%@\n&quot;,error.description);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>值得一提的是iOS10更新后，在<code>&lt;UNUserNotificationCenterDelegate&gt;</code>中有两个处理通知接受和点击事件的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@protocol UNUserNotificationCenterDelegate &lt;NSObject&gt;</div><div class="line"></div><div class="line">@optional</div><div class="line"></div><div class="line">// The method will be called on the delegate only if the application is in the foreground. If the method is not implemented or the handler is not called in a timely manner then the notification will not be presented. The application can choose to have the notification presented as a sound, badge, alert and/or in the notification list. This decision should be based on whether the information in the notification is otherwise visible to the user.</div><div class="line">- (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler __IOS_AVAILABLE(10.0) __TVOS_AVAILABLE(10.0) __WATCHOS_AVAILABLE(3.0);</div><div class="line"></div><div class="line">// The method will be called on the delegate when the user responded to the notification by opening the application, dismissing the notification or choosing a UNNotificationAction. The delegate must be set before the application returns from applicationDidFinishLaunching:.</div><div class="line">- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)())completionHandler __IOS_AVAILABLE(10.0) __WATCHOS_AVAILABLE(3.0) __TVOS_PROHIBITED;</div><div class="line">@end</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在iOS10里面，本地通知与远程通知合二为一，在新的UNPushNotificationTrigger这个新类中，我们可以得到一些触发条件</p>
<ul>
<li>UNPushNotificationTrigger(远程通知) ：远程推送的通知类型</li>
<li>UNTimeIntervalNotificationTrigger(本地通知)：一定时间后，重复或不重复推送通知</li>
<li>UNCalendarNotificationTrigger(本地通知)：在一固定日期，重复或不重复推送</li>
<li>UNLocationNotificationTrigger(本地通知)：地理位置的一种通知，当用户进入或离开一个地理区域来通知。</li>
</ul>
<p>iOS10中接受通知回调是这样用的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// iOS 10收到通知</div><div class="line">- (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler&#123;</div><div class="line">    NSDictionary * userInfo = notification.request.content.userInfo;</div><div class="line">    UNNotificationRequest *request = notification.request; // 收到推送的请求</div><div class="line">    UNNotificationContent *content = request.content; // 收到推送的消息内容</div><div class="line">    NSNumber *badge = content.badge;  // 推送消息的角标</div><div class="line">    NSString *body = content.body;    // 推送消息体</div><div class="line">    UNNotificationSound *sound = content.sound;  // 推送消息的声音</div><div class="line">    NSString *subtitle = content.subtitle;  // 推送消息的副标题</div><div class="line">    NSString *title = content.title;  // 推送消息的标题</div><div class="line"></div><div class="line">    if([notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) &#123;</div><div class="line">        NSLog(@&quot;iOS10 前台收到远程通知:%@&quot;, [self logDic:userInfo]);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        // 判断为本地通知</div><div class="line">        NSLog(@&quot;iOS10 前台收到本地通知:&#123;\\\\nbody:%@，\\\\ntitle:%@,\\\\nsubtitle:%@,\\\\nbadge：%@，\\\\nsound：%@，\\\\nuserInfo：%@\\\\n&#125;&quot;,body,title,subtitle,badge,sound,userInfo);</div><div class="line">    &#125;</div><div class="line">    completionHandler(UNNotificationPresentationOptionBadge|UNNotificationPresentationOptionSound|UNNotificationPresentationOptionAlert); // 需要执行这个方法，选择是否提醒用户，有Badge、Sound、Alert三种类型可以设置</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>// 通知的点击事件</p>
<ul>
<li><p>(void)userNotificationCenter:(UNUserNotificationCenter <em>)center didReceiveNotificationResponse:(UNNotificationResponse </em>)response withCompletionHandler:(void(^)())completionHandler{</p>
<p>  NSDictionary <em> userInfo = response.notification.request.content.userInfo;<br>  UNNotificationRequest </em>request = response.notification.request; // 收到推送的请求<br>  UNNotificationContent <em>content = request.content; // 收到推送的消息内容<br>  NSNumber </em>badge = content.badge;  // 推送消息的角标<br>  NSString <em>body = content.body;    // 推送消息体<br>  UNNotificationSound </em>sound = content.sound;  // 推送消息的声音<br>  NSString <em>subtitle = content.subtitle;  // 推送消息的副标题<br>  NSString </em>title = content.title;  // 推送消息的标题<br>  if([response.notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {</p>
<pre><code>NSLog(@&quot;iOS10 收到远程通知:%@&quot;, [self logDic:userInfo]);
</code></pre><p>  }<br>  else {</p>
<pre><code>// 判断为本地通知
NSLog(@&quot;iOS10 收到本地通知:{\\\\nbody:%@，\\\\ntitle:%@,\\\\nsubtitle:%@,\\\\nbadge：%@，\\\\nsound：%@，\\\\nuserInfo：%@\\\\n}&quot;,body,title,subtitle,badge,sound,userInfo);
</code></pre><p>  }</p>
<p>  // Warning: UNUserNotificationCenter delegate received call to -userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler: but the completion handler was never called.<br>  completionHandler();  // 系统要求执行这个方法</p>
</li>
</ul>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">**这里需要提到的是，如果我们不写completionHandler（）这个方法，可能会报错误**</div><div class="line"></div><div class="line">* 在iOS10之前，本地通知创建是这样的：</div><div class="line"></div><div class="line">```objective-c</div><div class="line">- (void)sendLocalNotifi &#123; </div><div class="line">// 添加本地通知</div><div class="line">     UILocalNotification *localNoti = [[UILocalNotification alloc] init];</div><div class="line">     NSDate *Date = [NSDate date];</div><div class="line">     localNoti.fireDate = Date; // 发送通知时间 这里没做具体处理，若是要推送时间无误差，时间要精确到秒。</div><div class="line">     localNoti.timeZone = [NSTimeZone localTimeZone];     // 设置时区 默认时区</div><div class="line">     localNoti.repeatInterval = NSCalendarUnitSecond;     // 发送通知的间隔</div><div class="line">     localNoti.alertTitle = @&quot;iOS10之前的本地通知&quot;;                      // 弹窗title</div><div class="line">     localNoti.alertBody = @&quot;搞事了搞事了&quot;;               // 弹窗body显示内容</div><div class="line"></div><div class="line">     localNoti.soundName = UILocalNotificationDefaultSoundName;</div><div class="line">     localNoti.alertLaunchImage = @&quot;1.jpg&quot;; // 用于点击启动显示启动页，必须是 UILaunchImageFile</div><div class="line">     localNoti.userInfo = [NSDictionary dictionaryWithObjectsAndKeys:@&quot;value&quot;, @&quot;key&quot;, nil];</div><div class="line">     //    localNoti.soundName = @&quot;1&quot;;                       // 响铃音乐文件名称， 放在main bundle 里边</div><div class="line">      localNoti.applicationIconBadgeNumber = 2;         // app 的未读消息个数</div><div class="line"></div><div class="line"></div><div class="line">     [[UIApplication sharedApplication] cancelAllLocalNotifications];</div><div class="line">     [[UIApplication sharedApplication] scheduleLocalNotification:localNoti];    // 按照指定时间发送通知</div><div class="line">     // [[UIApplication sharedApplication] presentLocalNotificationNow:localNoti];  // 立即发送通知</div><div class="line"></div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>而在iOS10之后，通知创建变成了这样：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">UNMutableNotificationContent *content = [[UNMutableNotificationContent alloc] init];</div><div class="line">    content.title = @&quot;iOS10之后啦&quot;;</div><div class="line">    content.subtitle = @&quot;搞事了&quot;;</div><div class="line">    content.body = @&quot;123~&quot;;</div><div class="line">    content.badge = @0;</div><div class="line">    NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;image1&quot; ofType:@&quot;png&quot;];</div><div class="line">    NSError *error = nil;</div><div class="line">//将本地图片的路径形成一个图片附件，加入到content中</div><div class="line">    UNNotificationAttachment *img_attachment = [UNNotificationAttachment attachmentWithIdentifier:@&quot;att1&quot; URL:[NSURL fileURLWithPath:path] options:nil error:&amp;error];</div><div class="line">    if (error) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;, error);</div><div class="line">    &#125;</div><div class="line">    content.attachments = @[img_attachment];</div><div class="line">    //设置为@&quot;&quot;以后，进入app将没有启动页</div><div class="line">    content.launchImageName = @&quot;&quot;;</div><div class="line">    UNNotificationSound *sound = [UNNotificationSound defaultSound];</div><div class="line">    content.sound = sound;</div><div class="line">    //设置时间间隔的触发器</div><div class="line">    UNTimeIntervalNotificationTrigger *time_trigger = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:10 repeats:NO];</div><div class="line">    NSString *requestIdentifer = @&quot;time interval request&quot;;</div><div class="line">    content.categoryIdentifier = @&quot;&quot;;</div><div class="line">    UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:requestIdentifer content:content trigger:time_trigger];</div><div class="line">    [[UNUserNotificationCenter currentNotificationCenter] addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;,error);</div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此，本地通知创建就结束了，经过测试发现</p>
<ul>
<li>iOS10之前的推送，app在前台的时候，通知虽然会执行回调，但是并不会在主界面显示推送按钮</li>
<li>iOS10之前的推送，现在仍可以使用，感觉还挺方便的。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Neo_joke的<a href="http://www.jianshu.com/p/9c9035212af0" target="_blank" rel="external">简书文章</a></p>
<p>徐不同的<a href="http://www.jianshu.com/p/f5337e8f336d" target="_blank" rel="external">简书文章</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;iOS的推送有本地推送和远程推送两种，由于项目只需要个提示类型的，所以用本地推送就够了，所以在这里，介绍的都是iOS的本地推送。&lt;/p&gt;
&lt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="推送" scheme="http://yoursite.com/tags/%E6%8E%A8%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>阴雨的8.11</title>
    <link href="http://yoursite.com/2017/08/11/%E9%98%B4%E9%9B%A8%E7%9A%848-11/"/>
    <id>http://yoursite.com/2017/08/11/阴雨的8-11/</id>
    <published>2017-08-11T06:31:13.000Z</published>
    <updated>2017-08-11T07:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>##8月11</p>
<p>​    在八月的一个早晨，重庆难得的阴雨天醒来，全身疲乏，却又无法继续入睡。心情很压抑，可能是因为天气，也可能是因为自己内心的怯弱。</p>
<p>​    于是乎，琢磨着写点除了技术之外的文章。也算是发泄吧。</p>
<hr>
<p>​    不知道从什么时候开始，我就不再是以前那个无忧无虑，无限乐观的人了。上大学之前，总觉得自己是一个没心没肺的人，一天就知道玩，也没做过什么正经事。但是自从上了大学，到了现在，突然回过头看两年前的自己，惊讶于自己竟然能变化这么大，从小说的长大不可能抽烟也不会喝酒，到现在犯愁的时候就会和朋友喝上六七瓶，一个人在家的时候会点根烟缓解失落。原来变成自己讨厌的人，真的那么容易。</p>
<p>​    也不知道什么时候开始，突然就开始了独自生活，想想大概是在父母离异之后吧，父亲回了老家，那个他更为熟悉的地方。妈妈也不再拘束，除了工作以外，四处游玩。从前一直向往的独居生活，原来这样难熬。会常常因为深夜奇奇怪怪的声音烦恼，无法入眠，会因为门锁坏了而被困在门外一个小时等待开锁师傅过来，出门前会检查几遍有没有带钥匙，出门后要强迫记住自己关了门。突然觉得，自己掌管自己的人生的时候，那么不易，自己也老大不小了，快进入社会工作了，妈妈也退休了，突然整个家庭的重担就到了我的身上。压得我喘不过气，现在的我，做什么都不像以前那样无忧无虑，阔手阔脚，甚至为了饭钱发愁。想想也是挺失败的，活了20年，才觉得自己原来一事无成。</p>
<p>​    突然有些怀念陪伴了我20年的父母吵架生活，那时候我还会去劝阻，还觉得这世界上没有事情是解决不了的，还会无忧无虑的追求快乐，追求喜欢的女孩，谈纯真的恋爱。不像现在，学习成绩拿不出手，编程技术也不行，容易心态崩溃。</p>
<p>​    现在明白哥哥姐姐说的工作苦了，面对奇奇怪怪的需求，面对完全不懂的技术，面对陌生的人，我也不明白，以前这么擅长交际的自己怎么就变的胆小了。明年的这个时候，就要找工作了，很迷茫，很无奈。</p>
<p>​    写了一大通废话，记了一大通流水账，写完之后，还是要面对生活啊，着眼当下一步一步走下去吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##8月11&lt;/p&gt;
&lt;p&gt;​    在八月的一个早晨，重庆难得的阴雨天醒来，全身疲乏，却又无法继续入睡。心情很压抑，可能是因为天气，也可能是因为自己内心的怯弱。&lt;/p&gt;
&lt;p&gt;​    于是乎，琢磨着写点除了技术之外的文章。也算是发泄吧。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;​   
    
    </summary>
    
    
      <category term="随想" scheme="http://yoursite.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>关于iBeacon</title>
    <link href="http://yoursite.com/2017/08/06/%E5%85%B3%E4%BA%8EiBeacon/"/>
    <id>http://yoursite.com/2017/08/06/关于iBeacon/</id>
    <published>2017-08-06T10:54:02.000Z</published>
    <updated>2017-08-11T06:35:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为最近在做的项目是关于蓝牙连接的项目，前辈在做这个项目的时候，除了用ReactiveCocoa以外，还使用了iBeacon技术。</p>
<p>对于从未接触蓝牙这块的我，感觉打开了新世界大门。</p>
<h2 id="iBeacon"><a href="#iBeacon" class="headerlink" title="iBeacon"></a>iBeacon</h2><p>iBeacon是基于地理位置的微定位技术，使用的是Apple提供的CoreLocation（BLE使用的是CoreBluetooth）。根据名字，应该很清楚，使用iBeacon是需要开启定位的，而使用BLE只需要开启蓝牙。  </p>
<h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><ul>
<li>UUID：UUID是Universally UniqueIdentifier（通用唯一标识符）的缩写，实际上是一个随机字符串。在iBeacon中，UUID通常用于表示顶层标识，如果生成一个UUID给iBeacon设备，那么一个设备检测到你的iBeacon时，它就知道它是在和哪个iBeacon通信了。</li>
<li>major：用于将相关的beacon标识为一组。</li>
<li>minor：用于标识特定的beacon设备，每个设备都有唯一的minor编号。</li>
</ul>
<p>下面用一个商场的例子来解释这三个术语</p>
<p>你用有特定UUID的设备与商场里的UUID设备进行通信，一个商店中的所有设备都会被分配到相同的major编号，应用程序根据major编号，就可以知道你大概在哪个商店。而每个商店的每个beacon设备都有唯一的minor编号，那程序通过这个minor编号，就知道你位于商店的某一个位置</p>
<h2 id="iBeacon属性"><a href="#iBeacon属性" class="headerlink" title="iBeacon属性"></a>iBeacon属性</h2><p>iOS中的ibeacon通信数据有</p>
<ul>
<li>（NSUUID）ProximityUUID</li>
<li>（NSNumber）major</li>
<li>（NSNumber）minor</li>
<li>（CLProximity）proximity</li>
<li>（CLLocationAccuracy）accuracy</li>
<li>(NSInteger) rssi</li>
</ul>
<p>分别含义是：</p>
<ul>
<li>proximityUUID、major、minor表示ibeacon的uuid、major、minor</li>
<li>proximity是Apple提供的几个表示距离的属性<ul>
<li>CLProximityUnknown-没有数据</li>
<li>CLProximityImmediate-十厘米以内</li>
<li>CLProximityNear-一米以内</li>
<li>CLProximityFar-一米以外</li>
</ul>
</li>
<li>accuracy表示大约距离</li>
<li>RSSI表示信号强度</li>
</ul>
<p>根据属性我们可以看到，Apple的判断方式很有趣，它并不去仔细推断距离，而是使用贴近（Immediate）、一米以内（Near）、一米以外（Far）三种状态。距离在1m以内时，RSSI值基本上成比例减少，而在1米以上时，由于各种因素，RSSI是上下波动状态，所以无法推断距离，判定为Far</p>
<h2 id="iBeacon方法"><a href="#iBeacon方法" class="headerlink" title="iBeacon方法"></a>iBeacon方法</h2><p>Apple在iOS4中增加了地理围栏API，可以用来在设备进出某个区域时获得通知，包括了：</p>
<ul>
<li>-startMonitoringForRegion:</li>
<li>-locationManager:didEnterRegion:</li>
<li>-locationManager:didExitRegion:</li>
</ul>
<p>这种检测iBeacon的方式叫做<strong>monitoring</strong>。</p>
<p>用这几种方法可以使程序在后台运行时检测iBeacon，但是只能同时检测20个Region，且不能推测设备与Beacon的距离。</p>
<p>除了使用地理围栏API，Apple还在iOS7中新增加了iBeacon的专用检测方式，也就是<strong>ranging</strong></p>
<p>通过<strong>CLLocationManager</strong>的方法</p>
<ul>
<li><code>-startRangingBeaconsInRegion:</code> 检测特定iBeacon。</li>
</ul>
<p>当检测到beacon的时候，<strong>CLLocationManager</strong>的delegate </p>
<ul>
<li><code>-locationManager：didRangeBeacons:inRegion:</code>会被调用，通知调用者被检测到的beacons。这个方法会返回一个<strong>CLbeacon</strong>数组，根据里面的<strong>proximity</strong>(上文所提到的属性)就可以判断设备与beacon之间的距离。</li>
</ul>
<h2 id="iBeacon行为"><a href="#iBeacon行为" class="headerlink" title="iBeacon行为"></a>iBeacon行为</h2><p>根据<a href="https://tech.meituan.com/" target="_blank" rel="external">美团点评技术团队</a>的文章，暂时有以下结论</p>
<ul>
<li>检测到beacon的时间跟设备进行蓝牙扫描的时间间隔有关，每当设备扫描时，就能发现iBeacon region的变化。</li>
<li>在rangging打开的情况下，设备会每秒钟做一次扫描，也就是说状态更新最多延迟一秒。</li>
<li>程序在后台运行，并且monitoring打开的时候，设备可能每隔数分钟做一次扫描。iOS7响应较慢，iOS7.1后有较大改善。</li>
<li>如果存在设置<code>notifyEnterStateOnDisplay=yes</code>的beacon，iOS会在屏幕从黑屏点亮的时候进行一次扫描。</li>
<li>设备重启并不影响iBeacon后台检测的执行</li>
<li>iOS7中，在多任务界面中杀掉程序会终止iBeacon检测的执行，iOS7.1改变了这一行为，被杀掉的app还可以继续进行iBeacon的检测。</li>
</ul>
<p>在才接触这个项目的初期，好奇于项目与我事先准备的BLE协议实现有些区别，后来了解到用到了iBeacon技术，起初好奇为什么锁屏点亮和锁屏黑屏有什么区别，以为只是因为亮屏可能会激活后台。后来在了解了iBeacon之后，才知道，还有这种操作。所以啊，我们永远都不能放弃学习~。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>美团点评技术团队：<a href="https://tech.meituan.com/iBeacaon-first-glance.html" target="_blank" rel="external">iBeacon初探</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为最近在做的项目是关于蓝牙连接的项目，前辈在做这个项目的时候，除了用ReactiveCocoa以外，还使用了iBeacon技术。&lt;/p&gt;
&lt;p&gt;对于从未接触蓝牙这块的我，感觉打开了新世界大门。&lt;/p&gt;
&lt;h2 id=&quot;iBeacon&quot;&gt;&lt;a href=&quot;#iBeacon&quot;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="iBeacon" scheme="http://yoursite.com/tags/iBeacon/"/>
    
  </entry>
  
  <entry>
    <title>项目里的ReactiveCocoa</title>
    <link href="http://yoursite.com/2017/07/28/%E9%A1%B9%E7%9B%AE%E9%87%8C%E7%9A%84ReactiveCocoa/"/>
    <id>http://yoursite.com/2017/07/28/项目里的ReactiveCocoa/</id>
    <published>2017-07-28T10:59:44.000Z</published>
    <updated>2017-08-11T10:02:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>​    最近做了一个蓝牙相关的项目，项目的前辈当时是用的ReactiveCocoa（RAC）做的，才开始接手的时候，看的一头雾水。经过一段时间自学，现在对RAC略知一二。</p>
<h2 id="FunctionalReactiveProgramming"><a href="#FunctionalReactiveProgramming" class="headerlink" title="FunctionalReactiveProgramming"></a>FunctionalReactiveProgramming</h2><p>FRP是一种响应变化的编程范式。<img src="/img/FRP.png" alt="FRP"></p>
<p>就像上面的登录界面，在用户输入用户名和密码之前，登陆按钮是处于无法点击状态的，只有当用户名和密码都被填入一定值的时候，才可以点击登陆按钮。这种一个按钮会由于另外几个控件的改变而改变的联动就是FRP。</p>
<h2 id="ReactiveCocoa"><a href="#ReactiveCocoa" class="headerlink" title="ReactiveCocoa"></a>ReactiveCocoa</h2><p>RAC是github上的一个开源项目，可以说是将响应式编程做到了极致。RAC中，通过<strong>RACsignal</strong>来发送信号以执行各种操作</p>
<p>在这里，<a href="limboy.me">limboy(李忠)</a> 的文章里写的很好</p>
<p>他把信号比作水龙头，但是水龙头里装的是直径与水龙头内径一样的玻璃球(Value)，这样，玻璃球就是依次出来的（没有并发）。水龙头是关着的，需要有接收方（Subscriber）打开，这样只要有玻璃球(Value)出现，就会自动给接收方(subscriber)。还可以在水龙头上加一个滤嘴(Filter)，不符合的东西也不让过。还可以加一个改动装置，把球改成符合自己的需求（map）。也可以合并多个水龙头(combineLastest:reduce:)，这样只有有一个水龙头出玻璃球，这个新水龙头的接收方就会得到这个球。</p>
<p>比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//filter某个属性满足一定条件才执行。  </div><div class="line"></div><div class="line">  [[RACObserve(self, count) filter:^BOOL(id count) &#123;</div><div class="line">  if ([count integerValue] == 5) &#123;            </div><div class="line">		return YES;        &#125;</div><div class="line">	else&#123;           </div><div class="line">	 	return NO;        </div><div class="line">	&#125;   </div><div class="line"> &#125;]subscribeNext:^(id count) &#123;//上面return YES 才执行   </div><div class="line"></div><div class="line"> NSLog(@&quot;数量为===%@&quot;,count);    &#125;];</div></pre></td></tr></table></figure>
<p>RAC还在<strong>UIButton、UITextFiled</strong>等的Category中添加了很多方法，可以直接设置事件。</p>
<h2 id="统一了KVO-Event-Notification等的处理"><a href="#统一了KVO-Event-Notification等的处理" class="headerlink" title="统一了KVO Event Notification等的处理"></a>统一了KVO Event Notification等的处理</h2><blockquote>
<p>KVO</p>
</blockquote>
<p>RAC中监听属性改变不再像KVO中用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">而是使用block</div><div class="line"></div><div class="line">```iOS</div><div class="line">// 只有当名字以&apos;j&apos;开头，才会被记录</div><div class="line">[[RACAble(self.username) filter:^(NSString *newName) &#123;</div><div class="line">       return [newName hasPrefix:@&quot;j&quot;];</div><div class="line">   &#125;]</div><div class="line">   subscribeNext:^(NSString *newName) &#123;</div><div class="line">       NSLog(@&quot;%@&quot;, newName);</div><div class="line">   &#125;];</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Notification</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[NSNotificationCenter defaultCenter]rac_addObserverForName:@&quot;ReceiveData&quot; object:nil] subscribeNext:^(NSNotification * _Nullable x) &#123;</div><div class="line">                NSlog(@&quot;%@&quot;,x);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="冷热信号"><a href="#冷热信号" class="headerlink" title="冷热信号"></a>冷热信号</h2><p>上面提到的只有subscriber订阅时才生效的信号叫做<strong>冷信号</strong></p>
<p>有冷信号，自然就有<strong>热信号</strong></p>
<ul>
<li>热信号是主动的，不管你有没有订阅事件，它会时刻推送。</li>
<li>热信号可以有多个订阅者，信号和订阅者可以共享信息，多个订阅者可以在订阅开始时同时接收到这个时间及以后的信号（热信号创建时若没有订阅者，它仍然会进行信号发送），而冷信号多个订阅者订阅时，是将信号完整的分别发送给订阅者。</li>
</ul>
<p>冷热信号的区分，美团点评技术团队的<a href="https://tech.meituan.com/talk-about-reactivecocoas-cold-signal-and-hot-signal-part-1.html" target="_blank" rel="external">细说ReactiveCocoa的冷热信号</a>文章写的非常的好。</p>
<p>因为项目的需要，本人还在不断学习，归纳的东西还不够成熟，希望自己能加油吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    最近做了一个蓝牙相关的项目，项目的前辈当时是用的ReactiveCocoa（RAC）做的，才开始接手的时候，看的一头雾水。经过一段时间自学，现在对RAC略知一二。&lt;/p&gt;
&lt;h2 id=&quot;FunctionalReactiveProgramming&quot;&gt;&lt;a href
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="RAC" scheme="http://yoursite.com/tags/RAC/"/>
    
  </entry>
  
  <entry>
    <title>随想</title>
    <link href="http://yoursite.com/2017/07/24/%E9%9A%8F%E6%83%B3/"/>
    <id>http://yoursite.com/2017/07/24/随想/</id>
    <published>2017-07-24T05:54:47.000Z</published>
    <updated>2017-08-06T15:13:45.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>本来按理说像我这样的肚子里没有诗歌文学，脑子里没有代码技术的人，是不需要开博客的。
</code></pre><p>​<br>​<br>​    </p>
<pre><code>后来想了一想，有些东西还是写出来好一点，索性就花了点时间创建了这个博客来监督自己。
</code></pre><p>​<br>​    </p>
<pre><code>如果能帮到你，乃是我的荣幸。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;本来按理说像我这样的肚子里没有诗歌文学，脑子里没有代码技术的人，是不需要开博客的。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​&lt;br&gt;​&lt;br&gt;​    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;后来想了一想，有些东西还是写出来好一点，索性就花了点时间创建了这个博客来监督自己
    
    </summary>
    
    
      <category term="随想" scheme="http://yoursite.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
</feed>
